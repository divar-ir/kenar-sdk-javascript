/**
 * divar_interface/open_platform/chatapi/chatapi.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddonsEvaluationRowSection from './AddonsEvaluationRowSection';
import DivarIconsIconName from './DivarIconsIconName';

/**
 * The AddonsEvaluationRow model module.
 * @module model/AddonsEvaluationRow
 * @version 0.1.0
 */
class AddonsEvaluationRow {
    /**
     * Constructs a new <code>AddonsEvaluationRow</code>.
     * @alias module:model/AddonsEvaluationRow
     */
    constructor() { 
        
        AddonsEvaluationRow.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AddonsEvaluationRow</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddonsEvaluationRow} obj Optional instance to populate.
     * @return {module:model/AddonsEvaluationRow} The populated <code>AddonsEvaluationRow</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddonsEvaluationRow();

            if (data.hasOwnProperty('indicator_text')) {
                obj['indicator_text'] = ApiClient.convertToType(data['indicator_text'], 'String');
            }
            if (data.hasOwnProperty('indicator_percentage')) {
                obj['indicator_percentage'] = ApiClient.convertToType(data['indicator_percentage'], 'Number');
            }
            if (data.hasOwnProperty('icon_name')) {
                obj['icon_name'] = DivarIconsIconName.constructFromObject(data['icon_name']);
            }
            if (data.hasOwnProperty('left')) {
                obj['left'] = AddonsEvaluationRowSection.constructFromObject(data['left']);
            }
            if (data.hasOwnProperty('middle')) {
                obj['middle'] = AddonsEvaluationRowSection.constructFromObject(data['middle']);
            }
            if (data.hasOwnProperty('right')) {
                obj['right'] = AddonsEvaluationRowSection.constructFromObject(data['right']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddonsEvaluationRow</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddonsEvaluationRow</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['indicator_text'] && !(typeof data['indicator_text'] === 'string' || data['indicator_text'] instanceof String)) {
            throw new Error("Expected the field `indicator_text` to be a primitive type in the JSON string but got " + data['indicator_text']);
        }
        // validate the optional field `left`
        if (data['left']) { // data not null
          AddonsEvaluationRowSection.validateJSON(data['left']);
        }
        // validate the optional field `middle`
        if (data['middle']) { // data not null
          AddonsEvaluationRowSection.validateJSON(data['middle']);
        }
        // validate the optional field `right`
        if (data['right']) { // data not null
          AddonsEvaluationRowSection.validateJSON(data['right']);
        }

        return true;
    }

/**
     * @return {String}
     */
    getIndicatorText() {
        return this.indicator_text;
    }

    /**
     * @param {String} indicatorText
     */
    setIndicatorText(indicatorText) {
        this['indicator_text'] = indicatorText;
    }
/**
     * @return {Number}
     */
    getIndicatorPercentage() {
        return this.indicator_percentage;
    }

    /**
     * @param {Number} indicatorPercentage
     */
    setIndicatorPercentage(indicatorPercentage) {
        this['indicator_percentage'] = indicatorPercentage;
    }
/**
     * @return {module:model/DivarIconsIconName}
     */
    getIconName() {
        return this.icon_name;
    }

    /**
     * @param {module:model/DivarIconsIconName} iconName
     */
    setIconName(iconName) {
        this['icon_name'] = iconName;
    }
/**
     * @return {module:model/AddonsEvaluationRowSection}
     */
    getLeft() {
        return this.left;
    }

    /**
     * @param {module:model/AddonsEvaluationRowSection} left
     */
    setLeft(left) {
        this['left'] = left;
    }
/**
     * @return {module:model/AddonsEvaluationRowSection}
     */
    getMiddle() {
        return this.middle;
    }

    /**
     * @param {module:model/AddonsEvaluationRowSection} middle
     */
    setMiddle(middle) {
        this['middle'] = middle;
    }
/**
     * @return {module:model/AddonsEvaluationRowSection}
     */
    getRight() {
        return this.right;
    }

    /**
     * @param {module:model/AddonsEvaluationRowSection} right
     */
    setRight(right) {
        this['right'] = right;
    }

}



/**
 * @member {String} indicator_text
 */
AddonsEvaluationRow.prototype['indicator_text'] = undefined;

/**
 * @member {Number} indicator_percentage
 */
AddonsEvaluationRow.prototype['indicator_percentage'] = undefined;

/**
 * @member {module:model/DivarIconsIconName} icon_name
 */
AddonsEvaluationRow.prototype['icon_name'] = undefined;

/**
 * @member {module:model/AddonsEvaluationRowSection} left
 */
AddonsEvaluationRow.prototype['left'] = undefined;

/**
 * @member {module:model/AddonsEvaluationRowSection} middle
 */
AddonsEvaluationRow.prototype['middle'] = undefined;

/**
 * @member {module:model/AddonsEvaluationRowSection} right
 */
AddonsEvaluationRow.prototype['right'] = undefined;






export default AddonsEvaluationRow;

