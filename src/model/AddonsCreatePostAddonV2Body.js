/**
 * divar_interface/open_platform/chatapi/chatapi.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddonsWidget from './AddonsWidget';

/**
 * The AddonsCreatePostAddonV2Body model module.
 * @module model/AddonsCreatePostAddonV2Body
 * @version 0.1.0
 */
class AddonsCreatePostAddonV2Body {
    /**
     * Constructs a new <code>AddonsCreatePostAddonV2Body</code>.
     * @alias module:model/AddonsCreatePostAddonV2Body
     */
    constructor() { 
        
        AddonsCreatePostAddonV2Body.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AddonsCreatePostAddonV2Body</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddonsCreatePostAddonV2Body} obj Optional instance to populate.
     * @return {module:model/AddonsCreatePostAddonV2Body} The populated <code>AddonsCreatePostAddonV2Body</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddonsCreatePostAddonV2Body();

            if (data.hasOwnProperty('widgets')) {
                obj['widgets'] = ApiClient.convertToType(data['widgets'], [AddonsWidget]);
            }
            if (data.hasOwnProperty('semantic')) {
                obj['semantic'] = ApiClient.convertToType(data['semantic'], {'String': 'String'});
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddonsCreatePostAddonV2Body</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddonsCreatePostAddonV2Body</code>.
     */
    static validateJSON(data) {
        if (data['widgets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['widgets'])) {
                throw new Error("Expected the field `widgets` to be an array in the JSON data but got " + data['widgets']);
            }
            // validate the optional field `widgets` (array)
            for (const item of data['widgets']) {
                AddonsWidget.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }

        return true;
    }

/**
     * @return {Array.<module:model/AddonsWidget>}
     */
    getWidgets() {
        return this.widgets;
    }

    /**
     * @param {Array.<module:model/AddonsWidget>} widgets
     */
    setWidgets(widgets) {
        this['widgets'] = widgets;
    }
/**
     * @return {Object.<String, String>}
     */
    getSemantic() {
        return this.semantic;
    }

    /**
     * @param {Object.<String, String>} semantic
     */
    setSemantic(semantic) {
        this['semantic'] = semantic;
    }
/**
     * @return {String}
     */
    getNotes() {
        return this.notes;
    }

    /**
     * @param {String} notes
     */
    setNotes(notes) {
        this['notes'] = notes;
    }

}



/**
 * @member {Array.<module:model/AddonsWidget>} widgets
 */
AddonsCreatePostAddonV2Body.prototype['widgets'] = undefined;

/**
 * @member {Object.<String, String>} semantic
 */
AddonsCreatePostAddonV2Body.prototype['semantic'] = undefined;

/**
 * @member {String} notes
 */
AddonsCreatePostAddonV2Body.prototype['notes'] = undefined;






export default AddonsCreatePostAddonV2Body;

