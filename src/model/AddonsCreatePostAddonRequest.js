/**
 * Kenar API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddonsAddonSelector from './AddonsAddonSelector';

/**
 * The AddonsCreatePostAddonRequest model module.
 * @module model/AddonsCreatePostAddonRequest
 * @version 0.1.0
 */
class AddonsCreatePostAddonRequest {
    /**
     * Constructs a new <code>AddonsCreatePostAddonRequest</code>.
     * @alias module:model/AddonsCreatePostAddonRequest
     */
    constructor() { 
        
        AddonsCreatePostAddonRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AddonsCreatePostAddonRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddonsCreatePostAddonRequest} obj Optional instance to populate.
     * @return {module:model/AddonsCreatePostAddonRequest} The populated <code>AddonsCreatePostAddonRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddonsCreatePostAddonRequest();

            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('widgets')) {
                obj['widgets'] = ApiClient.convertToType(data['widgets'], Object);
            }
            if (data.hasOwnProperty('selector')) {
                obj['selector'] = AddonsAddonSelector.constructFromObject(data['selector']);
            }
            if (data.hasOwnProperty('link_in_spec')) {
                obj['link_in_spec'] = ApiClient.convertToType(data['link_in_spec'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('semantic')) {
                obj['semantic'] = ApiClient.convertToType(data['semantic'], {'String': 'String'});
            }
            if (data.hasOwnProperty('semantic_sensitives')) {
                obj['semantic_sensitives'] = ApiClient.convertToType(data['semantic_sensitives'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddonsCreatePostAddonRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddonsCreatePostAddonRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // validate the optional field `selector`
        if (data['selector']) { // data not null
          AddonsAddonSelector.validateJSON(data['selector']);
        }
        // ensure the json data is a string
        if (data['link_in_spec'] && !(typeof data['link_in_spec'] === 'string' || data['link_in_spec'] instanceof String)) {
            throw new Error("Expected the field `link_in_spec` to be a primitive type in the JSON string but got " + data['link_in_spec']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['semantic_sensitives'])) {
            throw new Error("Expected the field `semantic_sensitives` to be an array in the JSON data but got " + data['semantic_sensitives']);
        }

        return true;
    }

/**
     * @return {String}
     */
    getToken() {
        return this.token;
    }

    /**
     * @param {String} token
     */
    setToken(token) {
        this['token'] = token;
    }
/**
     * @return {Object}
     */
    getWidgets() {
        return this.widgets;
    }

    /**
     * @param {Object} widgets
     */
    setWidgets(widgets) {
        this['widgets'] = widgets;
    }
/**
     * @return {module:model/AddonsAddonSelector}
     */
    getSelector() {
        return this.selector;
    }

    /**
     * @param {module:model/AddonsAddonSelector} selector
     */
    setSelector(selector) {
        this['selector'] = selector;
    }
/**
     * @return {String}
     */
    getLinkInSpec() {
        return this.link_in_spec;
    }

    /**
     * @param {String} linkInSpec
     */
    setLinkInSpec(linkInSpec) {
        this['link_in_spec'] = linkInSpec;
    }
/**
     * @return {String}
     */
    getNotes() {
        return this.notes;
    }

    /**
     * @param {String} notes
     */
    setNotes(notes) {
        this['notes'] = notes;
    }
/**
     * @return {Object.<String, String>}
     */
    getSemantic() {
        return this.semantic;
    }

    /**
     * @param {Object.<String, String>} semantic
     */
    setSemantic(semantic) {
        this['semantic'] = semantic;
    }
/**
     * @return {Array.<String>}
     */
    getSemanticSensitives() {
        return this.semantic_sensitives;
    }

    /**
     * @param {Array.<String>} semanticSensitives
     */
    setSemanticSensitives(semanticSensitives) {
        this['semantic_sensitives'] = semanticSensitives;
    }

}



/**
 * @member {String} token
 */
AddonsCreatePostAddonRequest.prototype['token'] = undefined;

/**
 * @member {Object} widgets
 */
AddonsCreatePostAddonRequest.prototype['widgets'] = undefined;

/**
 * @member {module:model/AddonsAddonSelector} selector
 */
AddonsCreatePostAddonRequest.prototype['selector'] = undefined;

/**
 * @member {String} link_in_spec
 */
AddonsCreatePostAddonRequest.prototype['link_in_spec'] = undefined;

/**
 * @member {String} notes
 */
AddonsCreatePostAddonRequest.prototype['notes'] = undefined;

/**
 * @member {Object.<String, String>} semantic
 */
AddonsCreatePostAddonRequest.prototype['semantic'] = undefined;

/**
 * @member {Array.<String>} semantic_sensitives
 */
AddonsCreatePostAddonRequest.prototype['semantic_sensitives'] = undefined;






export default AddonsCreatePostAddonRequest;

