/**
 * Kenar API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PaymentSubmitUserPaymentRequest model module.
 * @module model/PaymentSubmitUserPaymentRequest
 * @version 0.1.0
 */
class PaymentSubmitUserPaymentRequest {
    /**
     * Constructs a new <code>PaymentSubmitUserPaymentRequest</code>.
     * @alias module:model/PaymentSubmitUserPaymentRequest
     * @param amountRials {String} کل مبلغ پرداختی توسط کاربر، به ریال
     * @param profitRials {String} بخشی از مبلغ پرداختی که به شما تعلق می‌گیرد، به ریال. به عنوان مثال در افزونه‌های پرداخت امن بخش اعظم مبلغ پرداختی سهم فروشنده آگهی هست و این پارامتر باید برابر بخشی از مبلغ پرداختی که مربوط به کمیسیون سرویس‌دهنده پرداخت امن است قرار بگیرد. در صورتی که چنین مفهومی در فرایند پرداخت شما وجود ندارد مقدار این پارامتر را دقیقا برابر amount_rials ارسال کنید.
     * @param referenceId {String} شناسه مرجع فاکتور یا تراکنش
     * @param services {Array.<String>} لیست شناسه خدماتی که کاربر برای آنها پرداخت انجام داده است (مثلاً «banner»، «title_refinement» و ...). توصیه می‌شود از نام‌های انگلیسی کوتاه و توصیفی به‌عنوان شناسه خدمت استفاده شود.
     */
    constructor(amountRials, profitRials, referenceId, services) { 
        
        PaymentSubmitUserPaymentRequest.initialize(this, amountRials, profitRials, referenceId, services);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amountRials, profitRials, referenceId, services) { 
        obj['amount_rials'] = amountRials;
        obj['profit_rials'] = profitRials;
        obj['reference_id'] = referenceId;
        obj['services'] = services;
    }

    /**
     * Constructs a <code>PaymentSubmitUserPaymentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentSubmitUserPaymentRequest} obj Optional instance to populate.
     * @return {module:model/PaymentSubmitUserPaymentRequest} The populated <code>PaymentSubmitUserPaymentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentSubmitUserPaymentRequest();

            if (data.hasOwnProperty('amount_rials')) {
                obj['amount_rials'] = ApiClient.convertToType(data['amount_rials'], 'String');
            }
            if (data.hasOwnProperty('profit_rials')) {
                obj['profit_rials'] = ApiClient.convertToType(data['profit_rials'], 'String');
            }
            if (data.hasOwnProperty('reference_id')) {
                obj['reference_id'] = ApiClient.convertToType(data['reference_id'], 'String');
            }
            if (data.hasOwnProperty('services')) {
                obj['services'] = ApiClient.convertToType(data['services'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentSubmitUserPaymentRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentSubmitUserPaymentRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentSubmitUserPaymentRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['amount_rials'] && !(typeof data['amount_rials'] === 'string' || data['amount_rials'] instanceof String)) {
            throw new Error("Expected the field `amount_rials` to be a primitive type in the JSON string but got " + data['amount_rials']);
        }
        // ensure the json data is a string
        if (data['profit_rials'] && !(typeof data['profit_rials'] === 'string' || data['profit_rials'] instanceof String)) {
            throw new Error("Expected the field `profit_rials` to be a primitive type in the JSON string but got " + data['profit_rials']);
        }
        // ensure the json data is a string
        if (data['reference_id'] && !(typeof data['reference_id'] === 'string' || data['reference_id'] instanceof String)) {
            throw new Error("Expected the field `reference_id` to be a primitive type in the JSON string but got " + data['reference_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['services'])) {
            throw new Error("Expected the field `services` to be an array in the JSON data but got " + data['services']);
        }

        return true;
    }

/**
     * Returns کل مبلغ پرداختی توسط کاربر، به ریال
     * @return {String}
     */
    getAmountRials() {
        return this.amount_rials;
    }

    /**
     * Sets کل مبلغ پرداختی توسط کاربر، به ریال
     * @param {String} amountRials کل مبلغ پرداختی توسط کاربر، به ریال
     */
    setAmountRials(amountRials) {
        this['amount_rials'] = amountRials;
    }
/**
     * Returns بخشی از مبلغ پرداختی که به شما تعلق می‌گیرد، به ریال. به عنوان مثال در افزونه‌های پرداخت امن بخش اعظم مبلغ پرداختی سهم فروشنده آگهی هست و این پارامتر باید برابر بخشی از مبلغ پرداختی که مربوط به کمیسیون سرویس‌دهنده پرداخت امن است قرار بگیرد. در صورتی که چنین مفهومی در فرایند پرداخت شما وجود ندارد مقدار این پارامتر را دقیقا برابر amount_rials ارسال کنید.
     * @return {String}
     */
    getProfitRials() {
        return this.profit_rials;
    }

    /**
     * Sets بخشی از مبلغ پرداختی که به شما تعلق می‌گیرد، به ریال. به عنوان مثال در افزونه‌های پرداخت امن بخش اعظم مبلغ پرداختی سهم فروشنده آگهی هست و این پارامتر باید برابر بخشی از مبلغ پرداختی که مربوط به کمیسیون سرویس‌دهنده پرداخت امن است قرار بگیرد. در صورتی که چنین مفهومی در فرایند پرداخت شما وجود ندارد مقدار این پارامتر را دقیقا برابر amount_rials ارسال کنید.
     * @param {String} profitRials بخشی از مبلغ پرداختی که به شما تعلق می‌گیرد، به ریال. به عنوان مثال در افزونه‌های پرداخت امن بخش اعظم مبلغ پرداختی سهم فروشنده آگهی هست و این پارامتر باید برابر بخشی از مبلغ پرداختی که مربوط به کمیسیون سرویس‌دهنده پرداخت امن است قرار بگیرد. در صورتی که چنین مفهومی در فرایند پرداخت شما وجود ندارد مقدار این پارامتر را دقیقا برابر amount_rials ارسال کنید.
     */
    setProfitRials(profitRials) {
        this['profit_rials'] = profitRials;
    }
/**
     * Returns شناسه مرجع فاکتور یا تراکنش
     * @return {String}
     */
    getReferenceId() {
        return this.reference_id;
    }

    /**
     * Sets شناسه مرجع فاکتور یا تراکنش
     * @param {String} referenceId شناسه مرجع فاکتور یا تراکنش
     */
    setReferenceId(referenceId) {
        this['reference_id'] = referenceId;
    }
/**
     * Returns لیست شناسه خدماتی که کاربر برای آنها پرداخت انجام داده است (مثلاً «banner»، «title_refinement» و ...). توصیه می‌شود از نام‌های انگلیسی کوتاه و توصیفی به‌عنوان شناسه خدمت استفاده شود.
     * @return {Array.<String>}
     */
    getServices() {
        return this.services;
    }

    /**
     * Sets لیست شناسه خدماتی که کاربر برای آنها پرداخت انجام داده است (مثلاً «banner»، «title_refinement» و ...). توصیه می‌شود از نام‌های انگلیسی کوتاه و توصیفی به‌عنوان شناسه خدمت استفاده شود.
     * @param {Array.<String>} services لیست شناسه خدماتی که کاربر برای آنها پرداخت انجام داده است (مثلاً «banner»، «title_refinement» و ...). توصیه می‌شود از نام‌های انگلیسی کوتاه و توصیفی به‌عنوان شناسه خدمت استفاده شود.
     */
    setServices(services) {
        this['services'] = services;
    }

}

PaymentSubmitUserPaymentRequest.RequiredProperties = ["amount_rials", "profit_rials", "reference_id", "services"];

/**
 * کل مبلغ پرداختی توسط کاربر، به ریال
 * @member {String} amount_rials
 */
PaymentSubmitUserPaymentRequest.prototype['amount_rials'] = undefined;

/**
 * بخشی از مبلغ پرداختی که به شما تعلق می‌گیرد، به ریال. به عنوان مثال در افزونه‌های پرداخت امن بخش اعظم مبلغ پرداختی سهم فروشنده آگهی هست و این پارامتر باید برابر بخشی از مبلغ پرداختی که مربوط به کمیسیون سرویس‌دهنده پرداخت امن است قرار بگیرد. در صورتی که چنین مفهومی در فرایند پرداخت شما وجود ندارد مقدار این پارامتر را دقیقا برابر amount_rials ارسال کنید.
 * @member {String} profit_rials
 */
PaymentSubmitUserPaymentRequest.prototype['profit_rials'] = undefined;

/**
 * شناسه مرجع فاکتور یا تراکنش
 * @member {String} reference_id
 */
PaymentSubmitUserPaymentRequest.prototype['reference_id'] = undefined;

/**
 * لیست شناسه خدماتی که کاربر برای آنها پرداخت انجام داده است (مثلاً «banner»، «title_refinement» و ...). توصیه می‌شود از نام‌های انگلیسی کوتاه و توصیفی به‌عنوان شناسه خدمت استفاده شود.
 * @member {Array.<String>} services
 */
PaymentSubmitUserPaymentRequest.prototype['services'] = undefined;






export default PaymentSubmitUserPaymentRequest;

