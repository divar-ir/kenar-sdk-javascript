/**
 * Kenar API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaymentTransactionState from './PaymentTransactionState';
import PaymentTransactionType from './PaymentTransactionType';

/**
 * The PaymentTransaction model module.
 * @module model/PaymentTransaction
 * @version 0.1.0
 */
class PaymentTransaction {
    /**
     * Constructs a new <code>PaymentTransaction</code>.
     * @alias module:model/PaymentTransaction
     */
    constructor() { 
        
        PaymentTransaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PaymentTransaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentTransaction} obj Optional instance to populate.
     * @return {module:model/PaymentTransaction} The populated <code>PaymentTransaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentTransaction();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('cost_rials')) {
                obj['cost_rials'] = ApiClient.convertToType(data['cost_rials'], 'String');
            }
            if (data.hasOwnProperty('extra_details')) {
                obj['extra_details'] = ApiClient.convertToType(data['extra_details'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = PaymentTransactionState.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = PaymentTransactionType.constructFromObject(data['type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentTransaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentTransaction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['cost_rials'] && !(typeof data['cost_rials'] === 'string' || data['cost_rials'] instanceof String)) {
            throw new Error("Expected the field `cost_rials` to be a primitive type in the JSON string but got " + data['cost_rials']);
        }
        // ensure the json data is a string
        if (data['extra_details'] && !(typeof data['extra_details'] === 'string' || data['extra_details'] instanceof String)) {
            throw new Error("Expected the field `extra_details` to be a primitive type in the JSON string but got " + data['extra_details']);
        }

        return true;
    }

/**
     * Returns Same uuid when creating transaction
     * @return {String}
     */
    getId() {
        return this.id;
    }

    /**
     * Sets Same uuid when creating transaction
     * @param {String} id Same uuid when creating transaction
     */
    setId(id) {
        this['id'] = id;
    }
/**
     * Returns The cost of the transaction in rials for your application
     * @return {String}
     */
    getCostRials() {
        return this.cost_rials;
    }

    /**
     * Sets The cost of the transaction in rials for your application
     * @param {String} costRials The cost of the transaction in rials for your application
     */
    setCostRials(costRials) {
        this['cost_rials'] = costRials;
    }
/**
     * Returns Same Additional details which you sent in the request
     * @return {String}
     */
    getExtraDetails() {
        return this.extra_details;
    }

    /**
     * Sets Same Additional details which you sent in the request
     * @param {String} extraDetails Same Additional details which you sent in the request
     */
    setExtraDetails(extraDetails) {
        this['extra_details'] = extraDetails;
    }
/**
     * @return {module:model/PaymentTransactionState}
     */
    getState() {
        return this.state;
    }

    /**
     * @param {module:model/PaymentTransactionState} state
     */
    setState(state) {
        this['state'] = state;
    }
/**
     * @return {module:model/PaymentTransactionType}
     */
    getType() {
        return this.type;
    }

    /**
     * @param {module:model/PaymentTransactionType} type
     */
    setType(type) {
        this['type'] = type;
    }

}



/**
 * Same uuid when creating transaction
 * @member {String} id
 */
PaymentTransaction.prototype['id'] = undefined;

/**
 * The cost of the transaction in rials for your application
 * @member {String} cost_rials
 */
PaymentTransaction.prototype['cost_rials'] = undefined;

/**
 * Same Additional details which you sent in the request
 * @member {String} extra_details
 */
PaymentTransaction.prototype['extra_details'] = undefined;

/**
 * @member {module:model/PaymentTransactionState} state
 */
PaymentTransaction.prototype['state'] = undefined;

/**
 * @member {module:model/PaymentTransactionType} type
 */
PaymentTransaction.prototype['type'] = undefined;






export default PaymentTransaction;

