/**
 * Kenar API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddonsAddonMetaData from './AddonsAddonMetaData';
import AddonsAddonSemantic from './AddonsAddonSemantic';
import AddonsUserAddonFilters from './AddonsUserAddonFilters';

/**
 * The AddonsUserAddon model module.
 * @module model/AddonsUserAddon
 * @version 0.1.0
 */
class AddonsUserAddon {
    /**
     * Constructs a new <code>AddonsUserAddon</code>.
     * @alias module:model/AddonsUserAddon
     */
    constructor() { 
        
        AddonsUserAddon.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AddonsUserAddon</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddonsUserAddon} obj Optional instance to populate.
     * @return {module:model/AddonsUserAddon} The populated <code>AddonsUserAddon</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddonsUserAddon();

            if (data.hasOwnProperty('divar_user_id')) {
                obj['divar_user_id'] = ApiClient.convertToType(data['divar_user_id'], 'String');
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = AddonsUserAddonFilters.constructFromObject(data['filters']);
            }
            if (data.hasOwnProperty('meta_data')) {
                obj['meta_data'] = AddonsAddonMetaData.constructFromObject(data['meta_data']);
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('semantic')) {
                obj['semantic'] = ApiClient.convertToType(data['semantic'], {'String': 'String'});
            }
            if (data.hasOwnProperty('semantic_data')) {
                obj['semantic_data'] = AddonsAddonSemantic.constructFromObject(data['semantic_data']);
            }
            if (data.hasOwnProperty('sensitive_semantic')) {
                obj['sensitive_semantic'] = ApiClient.convertToType(data['sensitive_semantic'], {'String': 'String'});
            }
            if (data.hasOwnProperty('widgets')) {
                obj['widgets'] = ApiClient.convertToType(data['widgets'], Object);
            }
            if (data.hasOwnProperty('widgets_semantic')) {
                obj['widgets_semantic'] = ApiClient.convertToType(data['widgets_semantic'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddonsUserAddon</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddonsUserAddon</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['divar_user_id'] && !(typeof data['divar_user_id'] === 'string' || data['divar_user_id'] instanceof String)) {
            throw new Error("Expected the field `divar_user_id` to be a primitive type in the JSON string but got " + data['divar_user_id']);
        }
        // validate the optional field `filters`
        if (data['filters']) { // data not null
          AddonsUserAddonFilters.validateJSON(data['filters']);
        }
        // validate the optional field `meta_data`
        if (data['meta_data']) { // data not null
          AddonsAddonMetaData.validateJSON(data['meta_data']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // validate the optional field `semantic_data`
        if (data['semantic_data']) { // data not null
          AddonsAddonSemantic.validateJSON(data['semantic_data']);
        }

        return true;
    }

/**
     * @return {String}
     */
    getDivarUserId() {
        return this.divar_user_id;
    }

    /**
     * @param {String} divarUserId
     */
    setDivarUserId(divarUserId) {
        this['divar_user_id'] = divarUserId;
    }
/**
     * @return {module:model/AddonsUserAddonFilters}
     */
    getFilters() {
        return this.filters;
    }

    /**
     * @param {module:model/AddonsUserAddonFilters} filters
     */
    setFilters(filters) {
        this['filters'] = filters;
    }
/**
     * @return {module:model/AddonsAddonMetaData}
     */
    getMetaData() {
        return this.meta_data;
    }

    /**
     * @param {module:model/AddonsAddonMetaData} metaData
     */
    setMetaData(metaData) {
        this['meta_data'] = metaData;
    }
/**
     * @return {String}
     */
    getPhone() {
        return this.phone;
    }

    /**
     * @param {String} phone
     */
    setPhone(phone) {
        this['phone'] = phone;
    }
/**
     * @return {Object.<String, String>}
     */
    getSemantic() {
        return this.semantic;
    }

    /**
     * @param {Object.<String, String>} semantic
     */
    setSemantic(semantic) {
        this['semantic'] = semantic;
    }
/**
     * @return {module:model/AddonsAddonSemantic}
     */
    getSemanticData() {
        return this.semantic_data;
    }

    /**
     * @param {module:model/AddonsAddonSemantic} semanticData
     */
    setSemanticData(semanticData) {
        this['semantic_data'] = semanticData;
    }
/**
     * @return {Object.<String, String>}
     */
    getSensitiveSemantic() {
        return this.sensitive_semantic;
    }

    /**
     * @param {Object.<String, String>} sensitiveSemantic
     */
    setSensitiveSemantic(sensitiveSemantic) {
        this['sensitive_semantic'] = sensitiveSemantic;
    }
/**
     * @return {Object}
     */
    getWidgets() {
        return this.widgets;
    }

    /**
     * @param {Object} widgets
     */
    setWidgets(widgets) {
        this['widgets'] = widgets;
    }
/**
     * @return {Object}
     */
    getWidgetsSemantic() {
        return this.widgets_semantic;
    }

    /**
     * @param {Object} widgetsSemantic
     */
    setWidgetsSemantic(widgetsSemantic) {
        this['widgets_semantic'] = widgetsSemantic;
    }

}



/**
 * @member {String} divar_user_id
 */
AddonsUserAddon.prototype['divar_user_id'] = undefined;

/**
 * @member {module:model/AddonsUserAddonFilters} filters
 */
AddonsUserAddon.prototype['filters'] = undefined;

/**
 * @member {module:model/AddonsAddonMetaData} meta_data
 */
AddonsUserAddon.prototype['meta_data'] = undefined;

/**
 * @member {String} phone
 */
AddonsUserAddon.prototype['phone'] = undefined;

/**
 * @member {Object.<String, String>} semantic
 */
AddonsUserAddon.prototype['semantic'] = undefined;

/**
 * @member {module:model/AddonsAddonSemantic} semantic_data
 */
AddonsUserAddon.prototype['semantic_data'] = undefined;

/**
 * @member {Object.<String, String>} sensitive_semantic
 */
AddonsUserAddon.prototype['sensitive_semantic'] = undefined;

/**
 * @member {Object} widgets
 */
AddonsUserAddon.prototype['widgets'] = undefined;

/**
 * @member {Object} widgets_semantic
 */
AddonsUserAddon.prototype['widgets_semantic'] = undefined;






export default AddonsUserAddon;

