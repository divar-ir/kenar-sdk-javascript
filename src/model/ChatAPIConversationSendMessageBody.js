/**
 * Kenar API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChatapiChatButtonGrid from './ChatapiChatButtonGrid';

/**
 * The ChatAPIConversationSendMessageBody model module.
 * @module model/ChatAPIConversationSendMessageBody
 * @version 0.1.0
 */
class ChatAPIConversationSendMessageBody {
    /**
     * Constructs a new <code>ChatAPIConversationSendMessageBody</code>.
     * @alias module:model/ChatAPIConversationSendMessageBody
     * @param message {String} Text message content to be sent
     */
    constructor(message) { 
        
        ChatAPIConversationSendMessageBody.initialize(this, message);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, message) { 
        obj['message'] = message;
    }

    /**
     * Constructs a <code>ChatAPIConversationSendMessageBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChatAPIConversationSendMessageBody} obj Optional instance to populate.
     * @return {module:model/ChatAPIConversationSendMessageBody} The populated <code>ChatAPIConversationSendMessageBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChatAPIConversationSendMessageBody();

            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('media_token')) {
                obj['media_token'] = ApiClient.convertToType(data['media_token'], 'String');
            }
            if (data.hasOwnProperty('sender_buttons')) {
                obj['sender_buttons'] = ChatapiChatButtonGrid.constructFromObject(data['sender_buttons']);
            }
            if (data.hasOwnProperty('receiver_buttons')) {
                obj['receiver_buttons'] = ChatapiChatButtonGrid.constructFromObject(data['receiver_buttons']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChatAPIConversationSendMessageBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChatAPIConversationSendMessageBody</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChatAPIConversationSendMessageBody.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['media_token'] && !(typeof data['media_token'] === 'string' || data['media_token'] instanceof String)) {
            throw new Error("Expected the field `media_token` to be a primitive type in the JSON string but got " + data['media_token']);
        }
        // validate the optional field `sender_buttons`
        if (data['sender_buttons']) { // data not null
          ChatapiChatButtonGrid.validateJSON(data['sender_buttons']);
        }
        // validate the optional field `receiver_buttons`
        if (data['receiver_buttons']) { // data not null
          ChatapiChatButtonGrid.validateJSON(data['receiver_buttons']);
        }

        return true;
    }

/**
     * Returns Text message content to be sent
     * @return {String}
     */
    getMessage() {
        return this.message;
    }

    /**
     * Sets Text message content to be sent
     * @param {String} message Text message content to be sent
     */
    setMessage(message) {
        this['message'] = message;
    }
/**
     * Returns Token for attached media (if any)
     * @return {String}
     */
    getMediaToken() {
        return this.media_token;
    }

    /**
     * Sets Token for attached media (if any)
     * @param {String} mediaToken Token for attached media (if any)
     */
    setMediaToken(mediaToken) {
        this['media_token'] = mediaToken;
    }
/**
     * @return {module:model/ChatapiChatButtonGrid}
     */
    getSenderButtons() {
        return this.sender_buttons;
    }

    /**
     * @param {module:model/ChatapiChatButtonGrid} senderButtons
     */
    setSenderButtons(senderButtons) {
        this['sender_buttons'] = senderButtons;
    }
/**
     * @return {module:model/ChatapiChatButtonGrid}
     */
    getReceiverButtons() {
        return this.receiver_buttons;
    }

    /**
     * @param {module:model/ChatapiChatButtonGrid} receiverButtons
     */
    setReceiverButtons(receiverButtons) {
        this['receiver_buttons'] = receiverButtons;
    }

}

ChatAPIConversationSendMessageBody.RequiredProperties = ["message"];

/**
 * Text message content to be sent
 * @member {String} message
 */
ChatAPIConversationSendMessageBody.prototype['message'] = undefined;

/**
 * Token for attached media (if any)
 * @member {String} media_token
 */
ChatAPIConversationSendMessageBody.prototype['media_token'] = undefined;

/**
 * @member {module:model/ChatapiChatButtonGrid} sender_buttons
 */
ChatAPIConversationSendMessageBody.prototype['sender_buttons'] = undefined;

/**
 * @member {module:model/ChatapiChatButtonGrid} receiver_buttons
 */
ChatAPIConversationSendMessageBody.prototype['receiver_buttons'] = undefined;






export default ChatAPIConversationSendMessageBody;

