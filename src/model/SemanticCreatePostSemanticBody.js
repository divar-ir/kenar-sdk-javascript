/**
 * Kenar API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SemanticCreatePostSemanticBody model module.
 * @module model/SemanticCreatePostSemanticBody
 * @version 0.1.0
 */
class SemanticCreatePostSemanticBody {
    /**
     * Constructs a new <code>SemanticCreatePostSemanticBody</code>.
     * @alias module:model/SemanticCreatePostSemanticBody
     */
    constructor() { 
        
        SemanticCreatePostSemanticBody.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SemanticCreatePostSemanticBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SemanticCreatePostSemanticBody} obj Optional instance to populate.
     * @return {module:model/SemanticCreatePostSemanticBody} The populated <code>SemanticCreatePostSemanticBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SemanticCreatePostSemanticBody();

            if (data.hasOwnProperty('semantic')) {
                obj['semantic'] = ApiClient.convertToType(data['semantic'], {'String': 'String'});
            }
            if (data.hasOwnProperty('ticket_uuid')) {
                obj['ticket_uuid'] = ApiClient.convertToType(data['ticket_uuid'], 'String');
            }
            if (data.hasOwnProperty('cost')) {
                obj['cost'] = ApiClient.convertToType(data['cost'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SemanticCreatePostSemanticBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SemanticCreatePostSemanticBody</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ticket_uuid'] && !(typeof data['ticket_uuid'] === 'string' || data['ticket_uuid'] instanceof String)) {
            throw new Error("Expected the field `ticket_uuid` to be a primitive type in the JSON string but got " + data['ticket_uuid']);
        }

        return true;
    }

/**
     * @return {Object.<String, String>}
     */
    getSemantic() {
        return this.semantic;
    }

    /**
     * @param {Object.<String, String>} semantic
     */
    setSemantic(semantic) {
        this['semantic'] = semantic;
    }
/**
     * @return {String}
     */
    getTicketUuid() {
        return this.ticket_uuid;
    }

    /**
     * @param {String} ticketUuid
     */
    setTicketUuid(ticketUuid) {
        this['ticket_uuid'] = ticketUuid;
    }
/**
     * @return {Number}
     */
    getCost() {
        return this.cost;
    }

    /**
     * @param {Number} cost
     */
    setCost(cost) {
        this['cost'] = cost;
    }

}



/**
 * @member {Object.<String, String>} semantic
 */
SemanticCreatePostSemanticBody.prototype['semantic'] = undefined;

/**
 * @member {String} ticket_uuid
 */
SemanticCreatePostSemanticBody.prototype['ticket_uuid'] = undefined;

/**
 * @member {Number} cost
 */
SemanticCreatePostSemanticBody.prototype['cost'] = undefined;






export default SemanticCreatePostSemanticBody;

