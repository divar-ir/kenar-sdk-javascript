/**
 * Kenar API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PostRoomsCount from './PostRoomsCount';

/**
 * The PostApartmentSellFields model module.
 * @module model/PostApartmentSellFields
 * @version 0.1.0
 */
class PostApartmentSellFields {
    /**
     * Constructs a new <code>PostApartmentSellFields</code>.
     * @alias module:model/PostApartmentSellFields
     * @param floor {Number} طبقه ملک. از -1 برای زیرزمین و 0 برای همکف استفاده کنید. از 1 برای طبقه اول و غیره.
     * @param hasElevator {Boolean} آیا ملک آسانسور دارد
     * @param hasOwnImage {Boolean} تصاویر مربوط به خود ملک بوده و تزئینی نیستند.
     * @param hasParking {Boolean} آیا ملک پارکینگ دارد
     * @param hasWarehouse {Boolean} آیا ملک انباری دارد
     * @param price {String} قیمت ملک به تومان
     * @param roomsCount {module:model/PostRoomsCount} 
     * @param size {Number} مساحت ملک بر حسب متر مربع
     * @param yearBuilt {Number} سال ساخت ملک (تقویم شمسی)
     */
    constructor(floor, hasElevator, hasOwnImage, hasParking, hasWarehouse, price, roomsCount, size, yearBuilt) { 
        
        PostApartmentSellFields.initialize(this, floor, hasElevator, hasOwnImage, hasParking, hasWarehouse, price, roomsCount, size, yearBuilt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, floor, hasElevator, hasOwnImage, hasParking, hasWarehouse, price, roomsCount, size, yearBuilt) { 
        obj['floor'] = floor;
        obj['has_elevator'] = hasElevator;
        obj['has_own_image'] = hasOwnImage;
        obj['has_parking'] = hasParking;
        obj['has_warehouse'] = hasWarehouse;
        obj['price'] = price;
        obj['rooms_count'] = roomsCount;
        obj['size'] = size;
        obj['year_built'] = yearBuilt;
    }

    /**
     * Constructs a <code>PostApartmentSellFields</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostApartmentSellFields} obj Optional instance to populate.
     * @return {module:model/PostApartmentSellFields} The populated <code>PostApartmentSellFields</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostApartmentSellFields();

            if (data.hasOwnProperty('floor')) {
                obj['floor'] = ApiClient.convertToType(data['floor'], 'Number');
            }
            if (data.hasOwnProperty('has_elevator')) {
                obj['has_elevator'] = ApiClient.convertToType(data['has_elevator'], 'Boolean');
            }
            if (data.hasOwnProperty('has_own_image')) {
                obj['has_own_image'] = ApiClient.convertToType(data['has_own_image'], 'Boolean');
            }
            if (data.hasOwnProperty('has_parking')) {
                obj['has_parking'] = ApiClient.convertToType(data['has_parking'], 'Boolean');
            }
            if (data.hasOwnProperty('has_warehouse')) {
                obj['has_warehouse'] = ApiClient.convertToType(data['has_warehouse'], 'Boolean');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'String');
            }
            if (data.hasOwnProperty('rooms_count')) {
                obj['rooms_count'] = PostRoomsCount.constructFromObject(data['rooms_count']);
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('year_built')) {
                obj['year_built'] = ApiClient.convertToType(data['year_built'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostApartmentSellFields</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostApartmentSellFields</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PostApartmentSellFields.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['price'] && !(typeof data['price'] === 'string' || data['price'] instanceof String)) {
            throw new Error("Expected the field `price` to be a primitive type in the JSON string but got " + data['price']);
        }

        return true;
    }

/**
     * Returns طبقه ملک. از -1 برای زیرزمین و 0 برای همکف استفاده کنید. از 1 برای طبقه اول و غیره.
     * @return {Number}
     */
    getFloor() {
        return this.floor;
    }

    /**
     * Sets طبقه ملک. از -1 برای زیرزمین و 0 برای همکف استفاده کنید. از 1 برای طبقه اول و غیره.
     * @param {Number} floor طبقه ملک. از -1 برای زیرزمین و 0 برای همکف استفاده کنید. از 1 برای طبقه اول و غیره.
     */
    setFloor(floor) {
        this['floor'] = floor;
    }
/**
     * Returns آیا ملک آسانسور دارد
     * @return {Boolean}
     */
    getHasElevator() {
        return this.has_elevator;
    }

    /**
     * Sets آیا ملک آسانسور دارد
     * @param {Boolean} hasElevator آیا ملک آسانسور دارد
     */
    setHasElevator(hasElevator) {
        this['has_elevator'] = hasElevator;
    }
/**
     * Returns تصاویر مربوط به خود ملک بوده و تزئینی نیستند.
     * @return {Boolean}
     */
    getHasOwnImage() {
        return this.has_own_image;
    }

    /**
     * Sets تصاویر مربوط به خود ملک بوده و تزئینی نیستند.
     * @param {Boolean} hasOwnImage تصاویر مربوط به خود ملک بوده و تزئینی نیستند.
     */
    setHasOwnImage(hasOwnImage) {
        this['has_own_image'] = hasOwnImage;
    }
/**
     * Returns آیا ملک پارکینگ دارد
     * @return {Boolean}
     */
    getHasParking() {
        return this.has_parking;
    }

    /**
     * Sets آیا ملک پارکینگ دارد
     * @param {Boolean} hasParking آیا ملک پارکینگ دارد
     */
    setHasParking(hasParking) {
        this['has_parking'] = hasParking;
    }
/**
     * Returns آیا ملک انباری دارد
     * @return {Boolean}
     */
    getHasWarehouse() {
        return this.has_warehouse;
    }

    /**
     * Sets آیا ملک انباری دارد
     * @param {Boolean} hasWarehouse آیا ملک انباری دارد
     */
    setHasWarehouse(hasWarehouse) {
        this['has_warehouse'] = hasWarehouse;
    }
/**
     * Returns قیمت ملک به تومان
     * @return {String}
     */
    getPrice() {
        return this.price;
    }

    /**
     * Sets قیمت ملک به تومان
     * @param {String} price قیمت ملک به تومان
     */
    setPrice(price) {
        this['price'] = price;
    }
/**
     * @return {module:model/PostRoomsCount}
     */
    getRoomsCount() {
        return this.rooms_count;
    }

    /**
     * @param {module:model/PostRoomsCount} roomsCount
     */
    setRoomsCount(roomsCount) {
        this['rooms_count'] = roomsCount;
    }
/**
     * Returns مساحت ملک بر حسب متر مربع
     * @return {Number}
     */
    getSize() {
        return this.size;
    }

    /**
     * Sets مساحت ملک بر حسب متر مربع
     * @param {Number} size مساحت ملک بر حسب متر مربع
     */
    setSize(size) {
        this['size'] = size;
    }
/**
     * Returns سال ساخت ملک (تقویم شمسی)
     * @return {Number}
     */
    getYearBuilt() {
        return this.year_built;
    }

    /**
     * Sets سال ساخت ملک (تقویم شمسی)
     * @param {Number} yearBuilt سال ساخت ملک (تقویم شمسی)
     */
    setYearBuilt(yearBuilt) {
        this['year_built'] = yearBuilt;
    }

}

PostApartmentSellFields.RequiredProperties = ["floor", "has_elevator", "has_own_image", "has_parking", "has_warehouse", "price", "rooms_count", "size", "year_built"];

/**
 * طبقه ملک. از -1 برای زیرزمین و 0 برای همکف استفاده کنید. از 1 برای طبقه اول و غیره.
 * @member {Number} floor
 */
PostApartmentSellFields.prototype['floor'] = undefined;

/**
 * آیا ملک آسانسور دارد
 * @member {Boolean} has_elevator
 */
PostApartmentSellFields.prototype['has_elevator'] = undefined;

/**
 * تصاویر مربوط به خود ملک بوده و تزئینی نیستند.
 * @member {Boolean} has_own_image
 */
PostApartmentSellFields.prototype['has_own_image'] = undefined;

/**
 * آیا ملک پارکینگ دارد
 * @member {Boolean} has_parking
 */
PostApartmentSellFields.prototype['has_parking'] = undefined;

/**
 * آیا ملک انباری دارد
 * @member {Boolean} has_warehouse
 */
PostApartmentSellFields.prototype['has_warehouse'] = undefined;

/**
 * قیمت ملک به تومان
 * @member {String} price
 */
PostApartmentSellFields.prototype['price'] = undefined;

/**
 * @member {module:model/PostRoomsCount} rooms_count
 */
PostApartmentSellFields.prototype['rooms_count'] = undefined;

/**
 * مساحت ملک بر حسب متر مربع
 * @member {Number} size
 */
PostApartmentSellFields.prototype['size'] = undefined;

/**
 * سال ساخت ملک (تقویم شمسی)
 * @member {Number} year_built
 */
PostApartmentSellFields.prototype['year_built'] = undefined;






export default PostApartmentSellFields;

