/**
 * Kenar API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TemporaryResidenceFieldsComfortAmenity from './TemporaryResidenceFieldsComfortAmenity';
import TemporaryResidenceFieldsHeatingCoolingSystem from './TemporaryResidenceFieldsHeatingCoolingSystem';
import TemporaryResidenceFieldsPetsAllowed from './TemporaryResidenceFieldsPetsAllowed';
import TemporaryResidenceFieldsRentalPeriod from './TemporaryResidenceFieldsRentalPeriod';
import TemporaryResidenceFieldsRoomsCount from './TemporaryResidenceFieldsRoomsCount';

/**
 * The PostTemporaryResidenceFields model module.
 * @module model/PostTemporaryResidenceFields
 * @version 0.1.0
 */
class PostTemporaryResidenceFields {
    /**
     * Constructs a new <code>PostTemporaryResidenceFields</code>.
     * @alias module:model/PostTemporaryResidenceFields
     * @param area {Number} متراژ اقامتگاه به متر مربع
     * @param extraPersonCapacity {Number} تعداد افراد اضافه مجاز در اقامتگاه
     * @param hasOwnImage {Boolean} تصاویر مربوط به خود ملک بوده و تزئینی نیستند.
     * @param priceCostPerExtraPerson {String} هزینه هر نفر اضافه به ازای هر شب به تومان
     * @param priceRegularDays {String} قیمت اقامتگاه در روزهای عادی (شنبه تا سه‌شنبه) به تومان
     * @param priceSpecialDays {String} قیمت اقامتگاه در روزهای خاص (تعطیلات و مناسبت‌ها) به تومان
     * @param priceWeekends {String} قیمت اقامتگاه در آخر هفته (چهارشنبه تا جمعه) به تومان
     * @param regularPersonCapacity {Number} ظرفیت استاندارد افراد در اقامتگاه
     * @param roomsCount {module:model/TemporaryResidenceFieldsRoomsCount} 
     */
    constructor(area, extraPersonCapacity, hasOwnImage, priceCostPerExtraPerson, priceRegularDays, priceSpecialDays, priceWeekends, regularPersonCapacity, roomsCount) { 
        
        PostTemporaryResidenceFields.initialize(this, area, extraPersonCapacity, hasOwnImage, priceCostPerExtraPerson, priceRegularDays, priceSpecialDays, priceWeekends, regularPersonCapacity, roomsCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, area, extraPersonCapacity, hasOwnImage, priceCostPerExtraPerson, priceRegularDays, priceSpecialDays, priceWeekends, regularPersonCapacity, roomsCount) { 
        obj['area'] = area;
        obj['extra_person_capacity'] = extraPersonCapacity;
        obj['has_own_image'] = hasOwnImage;
        obj['price_cost_per_extra_person'] = priceCostPerExtraPerson;
        obj['price_regular_days'] = priceRegularDays;
        obj['price_special_days'] = priceSpecialDays;
        obj['price_weekends'] = priceWeekends;
        obj['regular_person_capacity'] = regularPersonCapacity;
        obj['rooms_count'] = roomsCount;
    }

    /**
     * Constructs a <code>PostTemporaryResidenceFields</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostTemporaryResidenceFields} obj Optional instance to populate.
     * @return {module:model/PostTemporaryResidenceFields} The populated <code>PostTemporaryResidenceFields</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostTemporaryResidenceFields();

            if (data.hasOwnProperty('area')) {
                obj['area'] = ApiClient.convertToType(data['area'], 'Number');
            }
            if (data.hasOwnProperty('extra_person_capacity')) {
                obj['extra_person_capacity'] = ApiClient.convertToType(data['extra_person_capacity'], 'Number');
            }
            if (data.hasOwnProperty('has_own_image')) {
                obj['has_own_image'] = ApiClient.convertToType(data['has_own_image'], 'Boolean');
            }
            if (data.hasOwnProperty('price_cost_per_extra_person')) {
                obj['price_cost_per_extra_person'] = ApiClient.convertToType(data['price_cost_per_extra_person'], 'String');
            }
            if (data.hasOwnProperty('price_regular_days')) {
                obj['price_regular_days'] = ApiClient.convertToType(data['price_regular_days'], 'String');
            }
            if (data.hasOwnProperty('price_special_days')) {
                obj['price_special_days'] = ApiClient.convertToType(data['price_special_days'], 'String');
            }
            if (data.hasOwnProperty('price_weekends')) {
                obj['price_weekends'] = ApiClient.convertToType(data['price_weekends'], 'String');
            }
            if (data.hasOwnProperty('regular_person_capacity')) {
                obj['regular_person_capacity'] = ApiClient.convertToType(data['regular_person_capacity'], 'Number');
            }
            if (data.hasOwnProperty('rooms_count')) {
                obj['rooms_count'] = TemporaryResidenceFieldsRoomsCount.constructFromObject(data['rooms_count']);
            }
            if (data.hasOwnProperty('check_in_time')) {
                obj['check_in_time'] = ApiClient.convertToType(data['check_in_time'], 'String');
            }
            if (data.hasOwnProperty('check_out_time')) {
                obj['check_out_time'] = ApiClient.convertToType(data['check_out_time'], 'String');
            }
            if (data.hasOwnProperty('comfort_amenities')) {
                obj['comfort_amenities'] = ApiClient.convertToType(data['comfort_amenities'], [TemporaryResidenceFieldsComfortAmenity]);
            }
            if (data.hasOwnProperty('damage_deposit')) {
                obj['damage_deposit'] = ApiClient.convertToType(data['damage_deposit'], 'String');
            }
            if (data.hasOwnProperty('fully_furnished')) {
                obj['fully_furnished'] = ApiClient.convertToType(data['fully_furnished'], 'Boolean');
            }
            if (data.hasOwnProperty('heating_cooling_system')) {
                obj['heating_cooling_system'] = ApiClient.convertToType(data['heating_cooling_system'], [TemporaryResidenceFieldsHeatingCoolingSystem]);
            }
            if (data.hasOwnProperty('house_rules')) {
                obj['house_rules'] = ApiClient.convertToType(data['house_rules'], 'String');
            }
            if (data.hasOwnProperty('minimum_stay')) {
                obj['minimum_stay'] = ApiClient.convertToType(data['minimum_stay'], 'Number');
            }
            if (data.hasOwnProperty('pets_allowed')) {
                obj['pets_allowed'] = TemporaryResidenceFieldsPetsAllowed.constructFromObject(data['pets_allowed']);
            }
            if (data.hasOwnProperty('rental_period')) {
                obj['rental_period'] = TemporaryResidenceFieldsRentalPeriod.constructFromObject(data['rental_period']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostTemporaryResidenceFields</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostTemporaryResidenceFields</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PostTemporaryResidenceFields.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['price_cost_per_extra_person'] && !(typeof data['price_cost_per_extra_person'] === 'string' || data['price_cost_per_extra_person'] instanceof String)) {
            throw new Error("Expected the field `price_cost_per_extra_person` to be a primitive type in the JSON string but got " + data['price_cost_per_extra_person']);
        }
        // ensure the json data is a string
        if (data['price_regular_days'] && !(typeof data['price_regular_days'] === 'string' || data['price_regular_days'] instanceof String)) {
            throw new Error("Expected the field `price_regular_days` to be a primitive type in the JSON string but got " + data['price_regular_days']);
        }
        // ensure the json data is a string
        if (data['price_special_days'] && !(typeof data['price_special_days'] === 'string' || data['price_special_days'] instanceof String)) {
            throw new Error("Expected the field `price_special_days` to be a primitive type in the JSON string but got " + data['price_special_days']);
        }
        // ensure the json data is a string
        if (data['price_weekends'] && !(typeof data['price_weekends'] === 'string' || data['price_weekends'] instanceof String)) {
            throw new Error("Expected the field `price_weekends` to be a primitive type in the JSON string but got " + data['price_weekends']);
        }
        // ensure the json data is a string
        if (data['check_in_time'] && !(typeof data['check_in_time'] === 'string' || data['check_in_time'] instanceof String)) {
            throw new Error("Expected the field `check_in_time` to be a primitive type in the JSON string but got " + data['check_in_time']);
        }
        // ensure the json data is a string
        if (data['check_out_time'] && !(typeof data['check_out_time'] === 'string' || data['check_out_time'] instanceof String)) {
            throw new Error("Expected the field `check_out_time` to be a primitive type in the JSON string but got " + data['check_out_time']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['comfort_amenities'])) {
            throw new Error("Expected the field `comfort_amenities` to be an array in the JSON data but got " + data['comfort_amenities']);
        }
        // ensure the json data is a string
        if (data['damage_deposit'] && !(typeof data['damage_deposit'] === 'string' || data['damage_deposit'] instanceof String)) {
            throw new Error("Expected the field `damage_deposit` to be a primitive type in the JSON string but got " + data['damage_deposit']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['heating_cooling_system'])) {
            throw new Error("Expected the field `heating_cooling_system` to be an array in the JSON data but got " + data['heating_cooling_system']);
        }
        // ensure the json data is a string
        if (data['house_rules'] && !(typeof data['house_rules'] === 'string' || data['house_rules'] instanceof String)) {
            throw new Error("Expected the field `house_rules` to be a primitive type in the JSON string but got " + data['house_rules']);
        }

        return true;
    }

/**
     * Returns متراژ اقامتگاه به متر مربع
     * @return {Number}
     */
    getArea() {
        return this.area;
    }

    /**
     * Sets متراژ اقامتگاه به متر مربع
     * @param {Number} area متراژ اقامتگاه به متر مربع
     */
    setArea(area) {
        this['area'] = area;
    }
/**
     * Returns تعداد افراد اضافه مجاز در اقامتگاه
     * @return {Number}
     */
    getExtraPersonCapacity() {
        return this.extra_person_capacity;
    }

    /**
     * Sets تعداد افراد اضافه مجاز در اقامتگاه
     * @param {Number} extraPersonCapacity تعداد افراد اضافه مجاز در اقامتگاه
     */
    setExtraPersonCapacity(extraPersonCapacity) {
        this['extra_person_capacity'] = extraPersonCapacity;
    }
/**
     * Returns تصاویر مربوط به خود ملک بوده و تزئینی نیستند.
     * @return {Boolean}
     */
    getHasOwnImage() {
        return this.has_own_image;
    }

    /**
     * Sets تصاویر مربوط به خود ملک بوده و تزئینی نیستند.
     * @param {Boolean} hasOwnImage تصاویر مربوط به خود ملک بوده و تزئینی نیستند.
     */
    setHasOwnImage(hasOwnImage) {
        this['has_own_image'] = hasOwnImage;
    }
/**
     * Returns هزینه هر نفر اضافه به ازای هر شب به تومان
     * @return {String}
     */
    getPriceCostPerExtraPerson() {
        return this.price_cost_per_extra_person;
    }

    /**
     * Sets هزینه هر نفر اضافه به ازای هر شب به تومان
     * @param {String} priceCostPerExtraPerson هزینه هر نفر اضافه به ازای هر شب به تومان
     */
    setPriceCostPerExtraPerson(priceCostPerExtraPerson) {
        this['price_cost_per_extra_person'] = priceCostPerExtraPerson;
    }
/**
     * Returns قیمت اقامتگاه در روزهای عادی (شنبه تا سه‌شنبه) به تومان
     * @return {String}
     */
    getPriceRegularDays() {
        return this.price_regular_days;
    }

    /**
     * Sets قیمت اقامتگاه در روزهای عادی (شنبه تا سه‌شنبه) به تومان
     * @param {String} priceRegularDays قیمت اقامتگاه در روزهای عادی (شنبه تا سه‌شنبه) به تومان
     */
    setPriceRegularDays(priceRegularDays) {
        this['price_regular_days'] = priceRegularDays;
    }
/**
     * Returns قیمت اقامتگاه در روزهای خاص (تعطیلات و مناسبت‌ها) به تومان
     * @return {String}
     */
    getPriceSpecialDays() {
        return this.price_special_days;
    }

    /**
     * Sets قیمت اقامتگاه در روزهای خاص (تعطیلات و مناسبت‌ها) به تومان
     * @param {String} priceSpecialDays قیمت اقامتگاه در روزهای خاص (تعطیلات و مناسبت‌ها) به تومان
     */
    setPriceSpecialDays(priceSpecialDays) {
        this['price_special_days'] = priceSpecialDays;
    }
/**
     * Returns قیمت اقامتگاه در آخر هفته (چهارشنبه تا جمعه) به تومان
     * @return {String}
     */
    getPriceWeekends() {
        return this.price_weekends;
    }

    /**
     * Sets قیمت اقامتگاه در آخر هفته (چهارشنبه تا جمعه) به تومان
     * @param {String} priceWeekends قیمت اقامتگاه در آخر هفته (چهارشنبه تا جمعه) به تومان
     */
    setPriceWeekends(priceWeekends) {
        this['price_weekends'] = priceWeekends;
    }
/**
     * Returns ظرفیت استاندارد افراد در اقامتگاه
     * @return {Number}
     */
    getRegularPersonCapacity() {
        return this.regular_person_capacity;
    }

    /**
     * Sets ظرفیت استاندارد افراد در اقامتگاه
     * @param {Number} regularPersonCapacity ظرفیت استاندارد افراد در اقامتگاه
     */
    setRegularPersonCapacity(regularPersonCapacity) {
        this['regular_person_capacity'] = regularPersonCapacity;
    }
/**
     * @return {module:model/TemporaryResidenceFieldsRoomsCount}
     */
    getRoomsCount() {
        return this.rooms_count;
    }

    /**
     * @param {module:model/TemporaryResidenceFieldsRoomsCount} roomsCount
     */
    setRoomsCount(roomsCount) {
        this['rooms_count'] = roomsCount;
    }
/**
     * Returns Check-in time
     * @return {String}
     */
    getCheckInTime() {
        return this.check_in_time;
    }

    /**
     * Sets Check-in time
     * @param {String} checkInTime Check-in time
     */
    setCheckInTime(checkInTime) {
        this['check_in_time'] = checkInTime;
    }
/**
     * Returns Check-out time
     * @return {String}
     */
    getCheckOutTime() {
        return this.check_out_time;
    }

    /**
     * Sets Check-out time
     * @param {String} checkOutTime Check-out time
     */
    setCheckOutTime(checkOutTime) {
        this['check_out_time'] = checkOutTime;
    }
/**
     * @return {Array.<module:model/TemporaryResidenceFieldsComfortAmenity>}
     */
    getComfortAmenities() {
        return this.comfort_amenities;
    }

    /**
     * @param {Array.<module:model/TemporaryResidenceFieldsComfortAmenity>} comfortAmenities
     */
    setComfortAmenities(comfortAmenities) {
        this['comfort_amenities'] = comfortAmenities;
    }
/**
     * Returns Damage deposit amount in Toman
     * @return {String}
     */
    getDamageDeposit() {
        return this.damage_deposit;
    }

    /**
     * Sets Damage deposit amount in Toman
     * @param {String} damageDeposit Damage deposit amount in Toman
     */
    setDamageDeposit(damageDeposit) {
        this['damage_deposit'] = damageDeposit;
    }
/**
     * Returns Whether the residence is fully furnished
     * @return {Boolean}
     */
    getFullyFurnished() {
        return this.fully_furnished;
    }

    /**
     * Sets Whether the residence is fully furnished
     * @param {Boolean} fullyFurnished Whether the residence is fully furnished
     */
    setFullyFurnished(fullyFurnished) {
        this['fully_furnished'] = fullyFurnished;
    }
/**
     * @return {Array.<module:model/TemporaryResidenceFieldsHeatingCoolingSystem>}
     */
    getHeatingCoolingSystem() {
        return this.heating_cooling_system;
    }

    /**
     * @param {Array.<module:model/TemporaryResidenceFieldsHeatingCoolingSystem>} heatingCoolingSystem
     */
    setHeatingCoolingSystem(heatingCoolingSystem) {
        this['heating_cooling_system'] = heatingCoolingSystem;
    }
/**
     * Returns House rules and regulations
     * @return {String}
     */
    getHouseRules() {
        return this.house_rules;
    }

    /**
     * Sets House rules and regulations
     * @param {String} houseRules House rules and regulations
     */
    setHouseRules(houseRules) {
        this['house_rules'] = houseRules;
    }
/**
     * Returns Minimum number of days required for stay
     * @return {Number}
     */
    getMinimumStay() {
        return this.minimum_stay;
    }

    /**
     * Sets Minimum number of days required for stay
     * @param {Number} minimumStay Minimum number of days required for stay
     */
    setMinimumStay(minimumStay) {
        this['minimum_stay'] = minimumStay;
    }
/**
     * @return {module:model/TemporaryResidenceFieldsPetsAllowed}
     */
    getPetsAllowed() {
        return this.pets_allowed;
    }

    /**
     * @param {module:model/TemporaryResidenceFieldsPetsAllowed} petsAllowed
     */
    setPetsAllowed(petsAllowed) {
        this['pets_allowed'] = petsAllowed;
    }
/**
     * @return {module:model/TemporaryResidenceFieldsRentalPeriod}
     */
    getRentalPeriod() {
        return this.rental_period;
    }

    /**
     * @param {module:model/TemporaryResidenceFieldsRentalPeriod} rentalPeriod
     */
    setRentalPeriod(rentalPeriod) {
        this['rental_period'] = rentalPeriod;
    }

}

PostTemporaryResidenceFields.RequiredProperties = ["area", "extra_person_capacity", "has_own_image", "price_cost_per_extra_person", "price_regular_days", "price_special_days", "price_weekends", "regular_person_capacity", "rooms_count"];

/**
 * متراژ اقامتگاه به متر مربع
 * @member {Number} area
 */
PostTemporaryResidenceFields.prototype['area'] = undefined;

/**
 * تعداد افراد اضافه مجاز در اقامتگاه
 * @member {Number} extra_person_capacity
 */
PostTemporaryResidenceFields.prototype['extra_person_capacity'] = undefined;

/**
 * تصاویر مربوط به خود ملک بوده و تزئینی نیستند.
 * @member {Boolean} has_own_image
 */
PostTemporaryResidenceFields.prototype['has_own_image'] = undefined;

/**
 * هزینه هر نفر اضافه به ازای هر شب به تومان
 * @member {String} price_cost_per_extra_person
 */
PostTemporaryResidenceFields.prototype['price_cost_per_extra_person'] = undefined;

/**
 * قیمت اقامتگاه در روزهای عادی (شنبه تا سه‌شنبه) به تومان
 * @member {String} price_regular_days
 */
PostTemporaryResidenceFields.prototype['price_regular_days'] = undefined;

/**
 * قیمت اقامتگاه در روزهای خاص (تعطیلات و مناسبت‌ها) به تومان
 * @member {String} price_special_days
 */
PostTemporaryResidenceFields.prototype['price_special_days'] = undefined;

/**
 * قیمت اقامتگاه در آخر هفته (چهارشنبه تا جمعه) به تومان
 * @member {String} price_weekends
 */
PostTemporaryResidenceFields.prototype['price_weekends'] = undefined;

/**
 * ظرفیت استاندارد افراد در اقامتگاه
 * @member {Number} regular_person_capacity
 */
PostTemporaryResidenceFields.prototype['regular_person_capacity'] = undefined;

/**
 * @member {module:model/TemporaryResidenceFieldsRoomsCount} rooms_count
 */
PostTemporaryResidenceFields.prototype['rooms_count'] = undefined;

/**
 * Check-in time
 * @member {String} check_in_time
 */
PostTemporaryResidenceFields.prototype['check_in_time'] = undefined;

/**
 * Check-out time
 * @member {String} check_out_time
 */
PostTemporaryResidenceFields.prototype['check_out_time'] = undefined;

/**
 * @member {Array.<module:model/TemporaryResidenceFieldsComfortAmenity>} comfort_amenities
 */
PostTemporaryResidenceFields.prototype['comfort_amenities'] = undefined;

/**
 * Damage deposit amount in Toman
 * @member {String} damage_deposit
 */
PostTemporaryResidenceFields.prototype['damage_deposit'] = undefined;

/**
 * Whether the residence is fully furnished
 * @member {Boolean} fully_furnished
 */
PostTemporaryResidenceFields.prototype['fully_furnished'] = undefined;

/**
 * @member {Array.<module:model/TemporaryResidenceFieldsHeatingCoolingSystem>} heating_cooling_system
 */
PostTemporaryResidenceFields.prototype['heating_cooling_system'] = undefined;

/**
 * House rules and regulations
 * @member {String} house_rules
 */
PostTemporaryResidenceFields.prototype['house_rules'] = undefined;

/**
 * Minimum number of days required for stay
 * @member {Number} minimum_stay
 */
PostTemporaryResidenceFields.prototype['minimum_stay'] = undefined;

/**
 * @member {module:model/TemporaryResidenceFieldsPetsAllowed} pets_allowed
 */
PostTemporaryResidenceFields.prototype['pets_allowed'] = undefined;

/**
 * @member {module:model/TemporaryResidenceFieldsRentalPeriod} rental_period
 */
PostTemporaryResidenceFields.prototype['rental_period'] = undefined;






export default PostTemporaryResidenceFields;

