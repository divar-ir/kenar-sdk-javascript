/**
 * Kenar API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChatapiChatButtonGrid from './ChatapiChatButtonGrid';

/**
 * The ChatAPIChatBotSendMessageBody model module.
 * @module model/ChatAPIChatBotSendMessageBody
 * @version 0.1.0
 */
class ChatAPIChatBotSendMessageBody {
    /**
     * Constructs a new <code>ChatAPIChatBotSendMessageBody</code>.
     * @alias module:model/ChatAPIChatBotSendMessageBody
     * @param textMessage {String} Text message content to be sent by the bot
     */
    constructor(textMessage) { 
        
        ChatAPIChatBotSendMessageBody.initialize(this, textMessage);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, textMessage) { 
        obj['text_message'] = textMessage;
    }

    /**
     * Constructs a <code>ChatAPIChatBotSendMessageBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChatAPIChatBotSendMessageBody} obj Optional instance to populate.
     * @return {module:model/ChatAPIChatBotSendMessageBody} The populated <code>ChatAPIChatBotSendMessageBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChatAPIChatBotSendMessageBody();

            if (data.hasOwnProperty('text_message')) {
                obj['text_message'] = ApiClient.convertToType(data['text_message'], 'String');
            }
            if (data.hasOwnProperty('buttons')) {
                obj['buttons'] = ChatapiChatButtonGrid.constructFromObject(data['buttons']);
            }
            if (data.hasOwnProperty('media_token')) {
                obj['media_token'] = ApiClient.convertToType(data['media_token'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChatAPIChatBotSendMessageBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChatAPIChatBotSendMessageBody</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChatAPIChatBotSendMessageBody.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['text_message'] && !(typeof data['text_message'] === 'string' || data['text_message'] instanceof String)) {
            throw new Error("Expected the field `text_message` to be a primitive type in the JSON string but got " + data['text_message']);
        }
        // validate the optional field `buttons`
        if (data['buttons']) { // data not null
          ChatapiChatButtonGrid.validateJSON(data['buttons']);
        }
        // ensure the json data is a string
        if (data['media_token'] && !(typeof data['media_token'] === 'string' || data['media_token'] instanceof String)) {
            throw new Error("Expected the field `media_token` to be a primitive type in the JSON string but got " + data['media_token']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }

/**
     * Returns Text message content to be sent by the bot
     * @return {String}
     */
    getTextMessage() {
        return this.text_message;
    }

    /**
     * Sets Text message content to be sent by the bot
     * @param {String} textMessage Text message content to be sent by the bot
     */
    setTextMessage(textMessage) {
        this['text_message'] = textMessage;
    }
/**
     * @return {module:model/ChatapiChatButtonGrid}
     */
    getButtons() {
        return this.buttons;
    }

    /**
     * @param {module:model/ChatapiChatButtonGrid} buttons
     */
    setButtons(buttons) {
        this['buttons'] = buttons;
    }
/**
     * Returns Token for attached media (if any)
     * @return {String}
     */
    getMediaToken() {
        return this.media_token;
    }

    /**
     * Sets Token for attached media (if any)
     * @param {String} mediaToken Token for attached media (if any)
     */
    setMediaToken(mediaToken) {
        this['media_token'] = mediaToken;
    }
/**
     * Returns Unique identifier for the user to start or continue a conversation with
     * @return {String}
     */
    getUserId() {
        return this.user_id;
    }

    /**
     * Sets Unique identifier for the user to start or continue a conversation with
     * @param {String} userId Unique identifier for the user to start or continue a conversation with
     */
    setUserId(userId) {
        this['user_id'] = userId;
    }

}

ChatAPIChatBotSendMessageBody.RequiredProperties = ["text_message"];

/**
 * Text message content to be sent by the bot
 * @member {String} text_message
 */
ChatAPIChatBotSendMessageBody.prototype['text_message'] = undefined;

/**
 * @member {module:model/ChatapiChatButtonGrid} buttons
 */
ChatAPIChatBotSendMessageBody.prototype['buttons'] = undefined;

/**
 * Token for attached media (if any)
 * @member {String} media_token
 */
ChatAPIChatBotSendMessageBody.prototype['media_token'] = undefined;

/**
 * Unique identifier for the user to start or continue a conversation with
 * @member {String} user_id
 */
ChatAPIChatBotSendMessageBody.prototype['user_id'] = undefined;






export default ChatAPIChatBotSendMessageBody;

