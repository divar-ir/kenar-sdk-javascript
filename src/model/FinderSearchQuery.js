/**
 * Kenar API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FinderSearchQueryNumberRange from './FinderSearchQueryNumberRange';

/**
 * The FinderSearchQuery model module.
 * @module model/FinderSearchQuery
 * @version 0.1.0
 */
class FinderSearchQuery {
    /**
     * Constructs a new <code>FinderSearchQuery</code>.
     * @alias module:model/FinderSearchQuery
     */
    constructor() { 
        
        FinderSearchQuery.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FinderSearchQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FinderSearchQuery} obj Optional instance to populate.
     * @return {module:model/FinderSearchQuery} The populated <code>FinderSearchQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FinderSearchQuery();

            if (data.hasOwnProperty('brand_model')) {
                obj['brand_model'] = ApiClient.convertToType(data['brand_model'], ['String']);
            }
            if (data.hasOwnProperty('credit')) {
                obj['credit'] = FinderSearchQueryNumberRange.constructFromObject(data['credit']);
            }
            if (data.hasOwnProperty('only_with_parking')) {
                obj['only_with_parking'] = ApiClient.convertToType(data['only_with_parking'], 'Boolean');
            }
            if (data.hasOwnProperty('production_year')) {
                obj['production_year'] = FinderSearchQueryNumberRange.constructFromObject(data['production_year']);
            }
            if (data.hasOwnProperty('rent')) {
                obj['rent'] = FinderSearchQueryNumberRange.constructFromObject(data['rent']);
            }
            if (data.hasOwnProperty('rooms')) {
                obj['rooms'] = ApiClient.convertToType(data['rooms'], ['String']);
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = FinderSearchQueryNumberRange.constructFromObject(data['size']);
            }
            if (data.hasOwnProperty('usage')) {
                obj['usage'] = FinderSearchQueryNumberRange.constructFromObject(data['usage']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FinderSearchQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FinderSearchQuery</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['brand_model'])) {
            throw new Error("Expected the field `brand_model` to be an array in the JSON data but got " + data['brand_model']);
        }
        // validate the optional field `credit`
        if (data['credit']) { // data not null
          FinderSearchQueryNumberRange.validateJSON(data['credit']);
        }
        // validate the optional field `production_year`
        if (data['production_year']) { // data not null
          FinderSearchQueryNumberRange.validateJSON(data['production_year']);
        }
        // validate the optional field `rent`
        if (data['rent']) { // data not null
          FinderSearchQueryNumberRange.validateJSON(data['rent']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['rooms'])) {
            throw new Error("Expected the field `rooms` to be an array in the JSON data but got " + data['rooms']);
        }
        // validate the optional field `size`
        if (data['size']) { // data not null
          FinderSearchQueryNumberRange.validateJSON(data['size']);
        }
        // validate the optional field `usage`
        if (data['usage']) { // data not null
          FinderSearchQueryNumberRange.validateJSON(data['usage']);
        }

        return true;
    }

/**
     * @return {Array.<String>}
     */
    getBrandModel() {
        return this.brand_model;
    }

    /**
     * @param {Array.<String>} brandModel
     */
    setBrandModel(brandModel) {
        this['brand_model'] = brandModel;
    }
/**
     * @return {module:model/FinderSearchQueryNumberRange}
     */
    getCredit() {
        return this.credit;
    }

    /**
     * @param {module:model/FinderSearchQueryNumberRange} credit
     */
    setCredit(credit) {
        this['credit'] = credit;
    }
/**
     * @return {Boolean}
     */
    getOnlyWithParking() {
        return this.only_with_parking;
    }

    /**
     * @param {Boolean} onlyWithParking
     */
    setOnlyWithParking(onlyWithParking) {
        this['only_with_parking'] = onlyWithParking;
    }
/**
     * @return {module:model/FinderSearchQueryNumberRange}
     */
    getProductionYear() {
        return this.production_year;
    }

    /**
     * @param {module:model/FinderSearchQueryNumberRange} productionYear
     */
    setProductionYear(productionYear) {
        this['production_year'] = productionYear;
    }
/**
     * @return {module:model/FinderSearchQueryNumberRange}
     */
    getRent() {
        return this.rent;
    }

    /**
     * @param {module:model/FinderSearchQueryNumberRange} rent
     */
    setRent(rent) {
        this['rent'] = rent;
    }
/**
     * @return {Array.<String>}
     */
    getRooms() {
        return this.rooms;
    }

    /**
     * @param {Array.<String>} rooms
     */
    setRooms(rooms) {
        this['rooms'] = rooms;
    }
/**
     * @return {module:model/FinderSearchQueryNumberRange}
     */
    getSize() {
        return this.size;
    }

    /**
     * @param {module:model/FinderSearchQueryNumberRange} size
     */
    setSize(size) {
        this['size'] = size;
    }
/**
     * @return {module:model/FinderSearchQueryNumberRange}
     */
    getUsage() {
        return this.usage;
    }

    /**
     * @param {module:model/FinderSearchQueryNumberRange} usage
     */
    setUsage(usage) {
        this['usage'] = usage;
    }

}



/**
 * @member {Array.<String>} brand_model
 */
FinderSearchQuery.prototype['brand_model'] = undefined;

/**
 * @member {module:model/FinderSearchQueryNumberRange} credit
 */
FinderSearchQuery.prototype['credit'] = undefined;

/**
 * @member {Boolean} only_with_parking
 */
FinderSearchQuery.prototype['only_with_parking'] = undefined;

/**
 * @member {module:model/FinderSearchQueryNumberRange} production_year
 */
FinderSearchQuery.prototype['production_year'] = undefined;

/**
 * @member {module:model/FinderSearchQueryNumberRange} rent
 */
FinderSearchQuery.prototype['rent'] = undefined;

/**
 * @member {Array.<String>} rooms
 */
FinderSearchQuery.prototype['rooms'] = undefined;

/**
 * @member {module:model/FinderSearchQueryNumberRange} size
 */
FinderSearchQuery.prototype['size'] = undefined;

/**
 * @member {module:model/FinderSearchQueryNumberRange} usage
 */
FinderSearchQuery.prototype['usage'] = undefined;






export default FinderSearchQuery;

