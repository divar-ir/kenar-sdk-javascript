/**
 * Kenar API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AddonsAddonSelector model module.
 * @module model/AddonsAddonSelector
 * @version 0.1.0
 */
class AddonsAddonSelector {
    /**
     * Constructs a new <code>AddonsAddonSelector</code>.
     * @alias module:model/AddonsAddonSelector
     */
    constructor() { 
        
        AddonsAddonSelector.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AddonsAddonSelector</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddonsAddonSelector} obj Optional instance to populate.
     * @return {module:model/AddonsAddonSelector} The populated <code>AddonsAddonSelector</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddonsAddonSelector();

            if (data.hasOwnProperty('brand_models')) {
                obj['brand_models'] = ApiClient.convertToType(data['brand_models'], ['String']);
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], ['String']);
            }
            if (data.hasOwnProperty('cities')) {
                obj['cities'] = ApiClient.convertToType(data['cities'], ['String']);
            }
            if (data.hasOwnProperty('districts')) {
                obj['districts'] = ApiClient.convertToType(data['districts'], ['String']);
            }
            if (data.hasOwnProperty('tokens')) {
                obj['tokens'] = ApiClient.convertToType(data['tokens'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddonsAddonSelector</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddonsAddonSelector</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['brand_models'])) {
            throw new Error("Expected the field `brand_models` to be an array in the JSON data but got " + data['brand_models']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categories'])) {
            throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['cities'])) {
            throw new Error("Expected the field `cities` to be an array in the JSON data but got " + data['cities']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['districts'])) {
            throw new Error("Expected the field `districts` to be an array in the JSON data but got " + data['districts']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tokens'])) {
            throw new Error("Expected the field `tokens` to be an array in the JSON data but got " + data['tokens']);
        }

        return true;
    }

/**
     * @return {Array.<String>}
     */
    getBrandModels() {
        return this.brand_models;
    }

    /**
     * @param {Array.<String>} brandModels
     */
    setBrandModels(brandModels) {
        this['brand_models'] = brandModels;
    }
/**
     * @return {Array.<String>}
     */
    getCategories() {
        return this.categories;
    }

    /**
     * @param {Array.<String>} categories
     */
    setCategories(categories) {
        this['categories'] = categories;
    }
/**
     * @return {Array.<String>}
     */
    getCities() {
        return this.cities;
    }

    /**
     * @param {Array.<String>} cities
     */
    setCities(cities) {
        this['cities'] = cities;
    }
/**
     * @return {Array.<String>}
     */
    getDistricts() {
        return this.districts;
    }

    /**
     * @param {Array.<String>} districts
     */
    setDistricts(districts) {
        this['districts'] = districts;
    }
/**
     * @return {Array.<String>}
     */
    getTokens() {
        return this.tokens;
    }

    /**
     * @param {Array.<String>} tokens
     */
    setTokens(tokens) {
        this['tokens'] = tokens;
    }

}



/**
 * @member {Array.<String>} brand_models
 */
AddonsAddonSelector.prototype['brand_models'] = undefined;

/**
 * @member {Array.<String>} categories
 */
AddonsAddonSelector.prototype['categories'] = undefined;

/**
 * @member {Array.<String>} cities
 */
AddonsAddonSelector.prototype['cities'] = undefined;

/**
 * @member {Array.<String>} districts
 */
AddonsAddonSelector.prototype['districts'] = undefined;

/**
 * @member {Array.<String>} tokens
 */
AddonsAddonSelector.prototype['tokens'] = undefined;






export default AddonsAddonSelector;

