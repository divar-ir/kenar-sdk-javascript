/**
 * Kenar API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProtobufAny model module.
 * @module model/ProtobufAny
 * @version 0.1.0
 */
class ProtobufAny {
    /**
     * Constructs a new <code>ProtobufAny</code>.
     * &#x60;Any&#x60; شامل یک پیام protocol buffer سریالایز شده دلخواه همراه با URL که نوع پیام سریالایز شده را توضیح می‌دهد.  کتابخانه Protobuf پشتیبانی برای pack/unpack مقادیر Any را به شکل توابع کاربردی یا متدهای اضافی تولید شده نوع Any ارائه می‌دهد.  مثال 1: Pack و unpack پیام در C++.      Foo foo &#x3D; ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&amp;foo)) {       ...     }  مثال 2: Pack و unpack پیام در Java.      Foo foo &#x3D; ...;     Any any &#x3D; Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo &#x3D; any.unpack(Foo.class);     }  مثال 3: Pack و unpack پیام در Python.      foo &#x3D; Foo(...)     any &#x3D; Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...  مثال 4: Pack و unpack پیام در Go       foo :&#x3D; &amp;pb.Foo{...}      any, err :&#x3D; anypb.New(foo)      if err !&#x3D; nil {        ...      }      ...      foo :&#x3D; &amp;pb.Foo{}      if err :&#x3D; any.UnmarshalTo(foo); err !&#x3D; nil {        ...      }  متدهای pack ارائه شده توسط کتابخانه protobuf به طور پیش‌فرض از &#39;type.googleapis.com/full.type.name&#39; به عنوان URL نوع استفاده می‌کنند و متدهای unpack فقط از نام نوع کاملاً واجد شرایط پس از آخرین &#39;/&#39; در URL نوع استفاده می‌کنند، مثلاً \&quot;foo.bar.com/x/y.z\&quot; نام نوع \&quot;y.z\&quot; را ایجاد می‌کند.   JSON  نمایش JSON یک مقدار &#x60;Any&#x60; از نمایش معمولی پیام deserialize شده و جاسازی شده، با یک فیلد اضافی &#x60;@type&#x60; که شامل URL نوع است، استفاده می‌کند. مثال:      package google.profile;     message Person {       string first_name &#x3D; 1;       string last_name &#x3D; 2;     }      {       \&quot;@type\&quot;: \&quot;type.googleapis.com/google.profile.Person\&quot;,       \&quot;firstName\&quot;: &lt;string&gt;,       \&quot;lastName\&quot;: &lt;string&gt;     }  اگر نوع پیام جاسازی شده شناخته شده باشد و نمایش JSON سفارشی داشته باشد، آن نمایش با افزودن فیلد &#x60;value&#x60; که JSON سفارشی را علاوه بر فیلد &#x60;@type&#x60; نگه می‌دارد، جاسازی می‌شود. مثال (برای پیام [google.protobuf.Duration][]):      {       \&quot;@type\&quot;: \&quot;type.googleapis.com/google.protobuf.Duration\&quot;,       \&quot;value\&quot;: \&quot;1.212s\&quot;     }
     * @alias module:model/ProtobufAny
     * @extends Object
     */
    constructor() { 
        
        ProtobufAny.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProtobufAny</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProtobufAny} obj Optional instance to populate.
     * @return {module:model/ProtobufAny} The populated <code>ProtobufAny</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProtobufAny();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('@type')) {
                obj['@type'] = ApiClient.convertToType(data['@type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProtobufAny</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProtobufAny</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['@type'] && !(typeof data['@type'] === 'string' || data['@type'] instanceof String)) {
            throw new Error("Expected the field `@type` to be a primitive type in the JSON string but got " + data['@type']);
        }

        return true;
    }

/**
     * Returns یک URL/نام منبع که نوع پیام protocol buffer سریالایز شده را به طور منحصر به فرد شناسایی می‌کند. این رشته باید حداقل یک کاراکتر \"/\" داشته باشد. آخرین بخش مسیر URL باید نام کاملاً واجد شرایط نوع را نمایش دهد (مانند `path/google.protobuf.Duration`). نام باید در فرم کانونیکال باشد (مثلاً، \".\" ابتدایی پذیرفته نیست).  در عمل، تیم‌ها معمولاً تمام انواعی که انتظار دارند در زمینه Any استفاده شود را به صورت پیش‌کامپایل در باینری قرار می‌دهند. با این حال، برای URL هایی که از طرح `http`، `https` یا بدون طرح استفاده می‌کنند، می‌توان به طور اختیاری یک سرور نوع تنظیم کرد که URL های نوع را به تعاریف پیام نگاشت می‌کند:  * اگر طرحی ارائه نشود، `https` فرض می‌شود. * یک HTTP GET روی URL باید مقدار [google.protobuf.Type][] را   به فرمت باینری ارائه دهد، یا خطا تولید کند. * برنامه‌ها مجاز هستند نتایج جستجو را بر اساس   URL کش کنند، یا آنها را در باینری پیش‌کامپایل کنند تا از هر   جستجویی جلوگیری کنند. بنابراین، سازگاری باینری باید در   تغییرات انواع حفظ شود. (از نام‌های نوع نسخه‌دار برای مدیریت   تغییرات شکست‌آور استفاده کنید.)  توجه: این قابلیت در حال حاضر در نسخه رسمی protobuf در دسترس نیست، و برای URL های نوع که با type.googleapis.com شروع می‌شوند استفاده نمی‌شود.  طرح‌های غیر از `http`، `https` (یا طرح خالی) ممکن است با معناشناسی خاص پیاده‌سازی استفاده شوند.
     * @return {String}
     */
    getType() {
        return this.@type;
    }

    /**
     * Sets یک URL/نام منبع که نوع پیام protocol buffer سریالایز شده را به طور منحصر به فرد شناسایی می‌کند. این رشته باید حداقل یک کاراکتر \"/\" داشته باشد. آخرین بخش مسیر URL باید نام کاملاً واجد شرایط نوع را نمایش دهد (مانند `path/google.protobuf.Duration`). نام باید در فرم کانونیکال باشد (مثلاً، \".\" ابتدایی پذیرفته نیست).  در عمل، تیم‌ها معمولاً تمام انواعی که انتظار دارند در زمینه Any استفاده شود را به صورت پیش‌کامپایل در باینری قرار می‌دهند. با این حال، برای URL هایی که از طرح `http`، `https` یا بدون طرح استفاده می‌کنند، می‌توان به طور اختیاری یک سرور نوع تنظیم کرد که URL های نوع را به تعاریف پیام نگاشت می‌کند:  * اگر طرحی ارائه نشود، `https` فرض می‌شود. * یک HTTP GET روی URL باید مقدار [google.protobuf.Type][] را   به فرمت باینری ارائه دهد، یا خطا تولید کند. * برنامه‌ها مجاز هستند نتایج جستجو را بر اساس   URL کش کنند، یا آنها را در باینری پیش‌کامپایل کنند تا از هر   جستجویی جلوگیری کنند. بنابراین، سازگاری باینری باید در   تغییرات انواع حفظ شود. (از نام‌های نوع نسخه‌دار برای مدیریت   تغییرات شکست‌آور استفاده کنید.)  توجه: این قابلیت در حال حاضر در نسخه رسمی protobuf در دسترس نیست، و برای URL های نوع که با type.googleapis.com شروع می‌شوند استفاده نمی‌شود.  طرح‌های غیر از `http`، `https` (یا طرح خالی) ممکن است با معناشناسی خاص پیاده‌سازی استفاده شوند.
     * @param {String} type یک URL/نام منبع که نوع پیام protocol buffer سریالایز شده را به طور منحصر به فرد شناسایی می‌کند. این رشته باید حداقل یک کاراکتر \"/\" داشته باشد. آخرین بخش مسیر URL باید نام کاملاً واجد شرایط نوع را نمایش دهد (مانند `path/google.protobuf.Duration`). نام باید در فرم کانونیکال باشد (مثلاً، \".\" ابتدایی پذیرفته نیست).  در عمل، تیم‌ها معمولاً تمام انواعی که انتظار دارند در زمینه Any استفاده شود را به صورت پیش‌کامپایل در باینری قرار می‌دهند. با این حال، برای URL هایی که از طرح `http`، `https` یا بدون طرح استفاده می‌کنند، می‌توان به طور اختیاری یک سرور نوع تنظیم کرد که URL های نوع را به تعاریف پیام نگاشت می‌کند:  * اگر طرحی ارائه نشود، `https` فرض می‌شود. * یک HTTP GET روی URL باید مقدار [google.protobuf.Type][] را   به فرمت باینری ارائه دهد، یا خطا تولید کند. * برنامه‌ها مجاز هستند نتایج جستجو را بر اساس   URL کش کنند، یا آنها را در باینری پیش‌کامپایل کنند تا از هر   جستجویی جلوگیری کنند. بنابراین، سازگاری باینری باید در   تغییرات انواع حفظ شود. (از نام‌های نوع نسخه‌دار برای مدیریت   تغییرات شکست‌آور استفاده کنید.)  توجه: این قابلیت در حال حاضر در نسخه رسمی protobuf در دسترس نیست، و برای URL های نوع که با type.googleapis.com شروع می‌شوند استفاده نمی‌شود.  طرح‌های غیر از `http`، `https` (یا طرح خالی) ممکن است با معناشناسی خاص پیاده‌سازی استفاده شوند.
     */
    setType(type) {
        this['@type'] = type;
    }

}



/**
 * یک URL/نام منبع که نوع پیام protocol buffer سریالایز شده را به طور منحصر به فرد شناسایی می‌کند. این رشته باید حداقل یک کاراکتر \"/\" داشته باشد. آخرین بخش مسیر URL باید نام کاملاً واجد شرایط نوع را نمایش دهد (مانند `path/google.protobuf.Duration`). نام باید در فرم کانونیکال باشد (مثلاً، \".\" ابتدایی پذیرفته نیست).  در عمل، تیم‌ها معمولاً تمام انواعی که انتظار دارند در زمینه Any استفاده شود را به صورت پیش‌کامپایل در باینری قرار می‌دهند. با این حال، برای URL هایی که از طرح `http`، `https` یا بدون طرح استفاده می‌کنند، می‌توان به طور اختیاری یک سرور نوع تنظیم کرد که URL های نوع را به تعاریف پیام نگاشت می‌کند:  * اگر طرحی ارائه نشود، `https` فرض می‌شود. * یک HTTP GET روی URL باید مقدار [google.protobuf.Type][] را   به فرمت باینری ارائه دهد، یا خطا تولید کند. * برنامه‌ها مجاز هستند نتایج جستجو را بر اساس   URL کش کنند، یا آنها را در باینری پیش‌کامپایل کنند تا از هر   جستجویی جلوگیری کنند. بنابراین، سازگاری باینری باید در   تغییرات انواع حفظ شود. (از نام‌های نوع نسخه‌دار برای مدیریت   تغییرات شکست‌آور استفاده کنید.)  توجه: این قابلیت در حال حاضر در نسخه رسمی protobuf در دسترس نیست، و برای URL های نوع که با type.googleapis.com شروع می‌شوند استفاده نمی‌شود.  طرح‌های غیر از `http`، `https` (یا طرح خالی) ممکن است با معناشناسی خاص پیاده‌سازی استفاده شوند.
 * @member {String} @type
 */
ProtobufAny.prototype['@type'] = undefined;






export default ProtobufAny;

