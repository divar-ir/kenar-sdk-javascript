/**
 * Kenar API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FinderSearchQuery from './FinderSearchQuery';

/**
 * The FinderSearchPostsV2Request model module.
 * @module model/FinderSearchPostsV2Request
 * @version 0.1.0
 */
class FinderSearchPostsV2Request {
    /**
     * Constructs a new <code>FinderSearchPostsV2Request</code>.
     * @alias module:model/FinderSearchPostsV2Request
     */
    constructor() { 
        
        FinderSearchPostsV2Request.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FinderSearchPostsV2Request</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FinderSearchPostsV2Request} obj Optional instance to populate.
     * @return {module:model/FinderSearchPostsV2Request} The populated <code>FinderSearchPostsV2Request</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FinderSearchPostsV2Request();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('districts')) {
                obj['districts'] = ApiClient.convertToType(data['districts'], ['String']);
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = FinderSearchQuery.constructFromObject(data['query']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FinderSearchPostsV2Request</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FinderSearchPostsV2Request</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['districts'])) {
            throw new Error("Expected the field `districts` to be an array in the JSON data but got " + data['districts']);
        }
        // validate the optional field `query`
        if (data['query']) { // data not null
          FinderSearchQuery.validateJSON(data['query']);
        }

        return true;
    }

/**
     * @return {String}
     */
    getCategory() {
        return this.category;
    }

    /**
     * @param {String} category
     */
    setCategory(category) {
        this['category'] = category;
    }
/**
     * @return {String}
     */
    getCity() {
        return this.city;
    }

    /**
     * @param {String} city
     */
    setCity(city) {
        this['city'] = city;
    }
/**
     * @return {Array.<String>}
     */
    getDistricts() {
        return this.districts;
    }

    /**
     * @param {Array.<String>} districts
     */
    setDistricts(districts) {
        this['districts'] = districts;
    }
/**
     * @return {module:model/FinderSearchQuery}
     */
    getQuery() {
        return this.query;
    }

    /**
     * @param {module:model/FinderSearchQuery} query
     */
    setQuery(query) {
        this['query'] = query;
    }

}



/**
 * @member {String} category
 */
FinderSearchPostsV2Request.prototype['category'] = undefined;

/**
 * @member {String} city
 */
FinderSearchPostsV2Request.prototype['city'] = undefined;

/**
 * @member {Array.<String>} districts
 */
FinderSearchPostsV2Request.prototype['districts'] = undefined;

/**
 * @member {module:model/FinderSearchQuery} query
 */
FinderSearchPostsV2Request.prototype['query'] = undefined;






export default FinderSearchPostsV2Request;

