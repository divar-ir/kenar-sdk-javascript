/**
 * Kenar API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddonsCreatePostAddonV2Body from '../model/AddonsCreatePostAddonV2Body';
import AddonsCreateUserAddonResponseV2 from '../model/AddonsCreateUserAddonResponseV2';
import AddonsCreateUserAddonV2Body from '../model/AddonsCreateUserAddonV2Body';
import AddonsGetUserAddonsResponse from '../model/AddonsGetUserAddonsResponse';
import GooglerpcStatus from '../model/GooglerpcStatus';

/**
* Addons service.
* @module api/AddonsApi
* @version 0.1.0
*/
export default class AddonsApi {

    /**
    * Constructs a new AddonsApi. 
    * @alias module:api/AddonsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * افزودن افزونه جدید به آگهی
     * با استفاده از این API و با مجوز کاربر، می‌توانید افزونه جدیدی به آگهی متصل کنید. می‌توانید از ویجت‌های موجود برای طراحی افزونه خود استفاده کنید. این API به توکن دسترسی با یکی از دامنه‌های زیر نیاز دارد: - USER_POSTS_ADDON_CREATE - POST_ADDON_CREATE.{post_token}
     * @param {String} token 
     * @param {module:model/AddonsCreatePostAddonV2Body} addonsCreatePostAddonV2Body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    addonsCreatePostAddonV2WithHttpInfo(token, addonsCreatePostAddonV2Body) {
      let postBody = addonsCreatePostAddonV2Body;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addonsCreatePostAddonV2");
      }
      // verify the required parameter 'addonsCreatePostAddonV2Body' is set
      if (addonsCreatePostAddonV2Body === undefined || addonsCreatePostAddonV2Body === null) {
        throw new Error("Missing the required parameter 'addonsCreatePostAddonV2Body' when calling addonsCreatePostAddonV2");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/open-platform/addons/post/{token}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * افزودن افزونه جدید به آگهی
     * با استفاده از این API و با مجوز کاربر، می‌توانید افزونه جدیدی به آگهی متصل کنید. می‌توانید از ویجت‌های موجود برای طراحی افزونه خود استفاده کنید. این API به توکن دسترسی با یکی از دامنه‌های زیر نیاز دارد: - USER_POSTS_ADDON_CREATE - POST_ADDON_CREATE.{post_token}
     * @param {String} token 
     * @param {module:model/AddonsCreatePostAddonV2Body} addonsCreatePostAddonV2Body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    addonsCreatePostAddonV2(token, addonsCreatePostAddonV2Body) {
      return this.addonsCreatePostAddonV2WithHttpInfo(token, addonsCreatePostAddonV2Body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * افزودن افزونه جدید به کاربر
     * با استفاده از این API و با مجوز کاربر، می‌توانید افزونه کاربر ایجاد کنید. افزونه کاربر به تمام آگهی‌های آینده کاربر متصل می‌شود و همچنین 30 آگهی آخر گذشته را پر می‌کند. می‌توانید از ویجت‌های موجود برای طراحی افزونه کاربر خود استفاده کنید. این API به توکن دسترسی با دامنه `USER_ADDON_CREATE` نیاز دارد
     * @param {String} phone 
     * @param {module:model/AddonsCreateUserAddonV2Body} addonsCreateUserAddonV2Body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AddonsCreateUserAddonResponseV2} and HTTP response
     */
    addonsCreateUserAddonV2WithHttpInfo(phone, addonsCreateUserAddonV2Body) {
      let postBody = addonsCreateUserAddonV2Body;
      // verify the required parameter 'phone' is set
      if (phone === undefined || phone === null) {
        throw new Error("Missing the required parameter 'phone' when calling addonsCreateUserAddonV2");
      }
      // verify the required parameter 'addonsCreateUserAddonV2Body' is set
      if (addonsCreateUserAddonV2Body === undefined || addonsCreateUserAddonV2Body === null) {
        throw new Error("Missing the required parameter 'addonsCreateUserAddonV2Body' when calling addonsCreateUserAddonV2");
      }

      let pathParams = {
        'phone': phone
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddonsCreateUserAddonResponseV2;
      return this.apiClient.callApi(
        '/v2/open-platform/addons/user/{phone}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * افزودن افزونه جدید به کاربر
     * با استفاده از این API و با مجوز کاربر، می‌توانید افزونه کاربر ایجاد کنید. افزونه کاربر به تمام آگهی‌های آینده کاربر متصل می‌شود و همچنین 30 آگهی آخر گذشته را پر می‌کند. می‌توانید از ویجت‌های موجود برای طراحی افزونه کاربر خود استفاده کنید. این API به توکن دسترسی با دامنه `USER_ADDON_CREATE` نیاز دارد
     * @param {String} phone 
     * @param {module:model/AddonsCreateUserAddonV2Body} addonsCreateUserAddonV2Body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AddonsCreateUserAddonResponseV2}
     */
    addonsCreateUserAddonV2(phone, addonsCreateUserAddonV2Body) {
      return this.addonsCreateUserAddonV2WithHttpInfo(phone, addonsCreateUserAddonV2Body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * افزودن افزونه جدید به کاربر
     * با استفاده از این API و با مجوز کاربر، می‌توانید افزونه کاربر ایجاد کنید. افزونه کاربر به تمام آگهی‌های آینده کاربر متصل می‌شود و همچنین 30 آگهی آخر گذشته را پر می‌کند. می‌توانید از ویجت‌های موجود برای طراحی افزونه کاربر خود استفاده کنید. این API به توکن دسترسی با دامنه `USER_ADDON_CREATE` نیاز دارد
     * @param {String} divarUserId 
     * @param {module:model/AddonsCreateUserAddonV2Body} addonsCreateUserAddonV2Body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AddonsCreateUserAddonResponseV2} and HTTP response
     */
    addonsCreateUserAddonV22WithHttpInfo(divarUserId, addonsCreateUserAddonV2Body) {
      let postBody = addonsCreateUserAddonV2Body;
      // verify the required parameter 'divarUserId' is set
      if (divarUserId === undefined || divarUserId === null) {
        throw new Error("Missing the required parameter 'divarUserId' when calling addonsCreateUserAddonV22");
      }
      // verify the required parameter 'addonsCreateUserAddonV2Body' is set
      if (addonsCreateUserAddonV2Body === undefined || addonsCreateUserAddonV2Body === null) {
        throw new Error("Missing the required parameter 'addonsCreateUserAddonV2Body' when calling addonsCreateUserAddonV22");
      }

      let pathParams = {
        'divar_user_id': divarUserId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddonsCreateUserAddonResponseV2;
      return this.apiClient.callApi(
        '/v2/open-platform/addons/users/{divar_user_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * افزودن افزونه جدید به کاربر
     * با استفاده از این API و با مجوز کاربر، می‌توانید افزونه کاربر ایجاد کنید. افزونه کاربر به تمام آگهی‌های آینده کاربر متصل می‌شود و همچنین 30 آگهی آخر گذشته را پر می‌کند. می‌توانید از ویجت‌های موجود برای طراحی افزونه کاربر خود استفاده کنید. این API به توکن دسترسی با دامنه `USER_ADDON_CREATE` نیاز دارد
     * @param {String} divarUserId 
     * @param {module:model/AddonsCreateUserAddonV2Body} addonsCreateUserAddonV2Body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AddonsCreateUserAddonResponseV2}
     */
    addonsCreateUserAddonV22(divarUserId, addonsCreateUserAddonV2Body) {
      return this.addonsCreateUserAddonV22WithHttpInfo(divarUserId, addonsCreateUserAddonV2Body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * حذف افزونه از آگهی
     * فقط می‌توانید افزونه‌هایی را حذف کنید که توسط اپلیکیشن شما ایجاد شده‌اند.
     * @param {String} token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    addonsDeletePostAddonWithHttpInfo(token) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addonsDeletePostAddon");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/open-platform/add-ons/post/{token}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * حذف افزونه از آگهی
     * فقط می‌توانید افزونه‌هایی را حذف کنید که توسط اپلیکیشن شما ایجاد شده‌اند.
     * @param {String} token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    addonsDeletePostAddon(token) {
      return this.addonsDeletePostAddonWithHttpInfo(token)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * حذف افزونه از آگهی
     * فقط می‌توانید افزونه‌هایی را حذف کنید که توسط اپلیکیشن شما ایجاد شده‌اند.
     * @param {String} token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    addonsDeletePostAddon2WithHttpInfo(token) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addonsDeletePostAddon2");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/open-platform/addons/post/{token}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * حذف افزونه از آگهی
     * فقط می‌توانید افزونه‌هایی را حذف کنید که توسط اپلیکیشن شما ایجاد شده‌اند.
     * @param {String} token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    addonsDeletePostAddon2(token) {
      return this.addonsDeletePostAddon2WithHttpInfo(token)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * حذف افزونه کاربر
     * این تمام افزونه‌های مرتبط با تمام آگهی‌های کاربر را حذف می‌کند. فقط می‌توانید افزونه‌هایی را حذف کنید که توسط اپلیکیشن شما ایجاد شده‌اند.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    addonsDeleteUserAddonWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addonsDeleteUserAddon");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/open-platform/addons/user/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * حذف افزونه کاربر
     * این تمام افزونه‌های مرتبط با تمام آگهی‌های کاربر را حذف می‌کند. فقط می‌توانید افزونه‌هایی را حذف کنید که توسط اپلیکیشن شما ایجاد شده‌اند.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    addonsDeleteUserAddon(id) {
      return this.addonsDeleteUserAddonWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * دریافت تمام افزونه‌های کاربر
     * دریافت تمام افزونه‌های کاربر یک کاربر.
     * @param {String} phone 
     * @param {Object} opts Optional parameters
     * @param {String} [divarUserId] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AddonsGetUserAddonsResponse} and HTTP response
     */
    addonsGetUserAddonsWithHttpInfo(phone, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'phone' is set
      if (phone === undefined || phone === null) {
        throw new Error("Missing the required parameter 'phone' when calling addonsGetUserAddons");
      }

      let pathParams = {
        'phone': phone
      };
      let queryParams = {
        'divar_user_id': opts['divarUserId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddonsGetUserAddonsResponse;
      return this.apiClient.callApi(
        '/v1/open-platform/addons/user/{phone}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * دریافت تمام افزونه‌های کاربر
     * دریافت تمام افزونه‌های کاربر یک کاربر.
     * @param {String} phone 
     * @param {Object} opts Optional parameters
     * @param {String} opts.divarUserId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AddonsGetUserAddonsResponse}
     */
    addonsGetUserAddons(phone, opts) {
      return this.addonsGetUserAddonsWithHttpInfo(phone, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * دریافت تمام افزونه‌های کاربر
     * دریافت تمام افزونه‌های کاربر یک کاربر.
     * @param {String} divarUserId 
     * @param {Object} opts Optional parameters
     * @param {String} [phone] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AddonsGetUserAddonsResponse} and HTTP response
     */
    addonsGetUserAddons2WithHttpInfo(divarUserId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'divarUserId' is set
      if (divarUserId === undefined || divarUserId === null) {
        throw new Error("Missing the required parameter 'divarUserId' when calling addonsGetUserAddons2");
      }

      let pathParams = {
        'divar_user_id': divarUserId
      };
      let queryParams = {
        'phone': opts['phone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddonsGetUserAddonsResponse;
      return this.apiClient.callApi(
        '/v2/open-platform/addons/users/{divar_user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * دریافت تمام افزونه‌های کاربر
     * دریافت تمام افزونه‌های کاربر یک کاربر.
     * @param {String} divarUserId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.phone 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AddonsGetUserAddonsResponse}
     */
    addonsGetUserAddons2(divarUserId, opts) {
      return this.addonsGetUserAddons2WithHttpInfo(divarUserId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
