/**
 * divar_interface/open_platform/chatapi/chatapi.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChatAPIChatBotSendMessageBody from '../model/ChatAPIChatBotSendMessageBody';
import ChatAPIConversationSendMessageBody from '../model/ChatAPIConversationSendMessageBody';
import ChatapiChatBotSendMessageResponse from '../model/ChatapiChatBotSendMessageResponse';
import ChatapiConversationSendMessageResponse from '../model/ChatapiConversationSendMessageResponse';
import ChatapiGenerateUploadTokenResponse from '../model/ChatapiGenerateUploadTokenResponse';
import ChatapiGetConversationResponse from '../model/ChatapiGetConversationResponse';
import GooglerpcStatus from '../model/GooglerpcStatus';

/**
* ChatAPI service.
* @module api/ChatAPIApi
* @version 0.1.0
*/
export default class ChatAPIApi {

    /**
    * Constructs a new ChatAPIApi. 
    * @alias module:api/ChatAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Send a message to a ChatBot conversation
     * You can call this API with either conversation_id or user_id. Calling with user_id needs a access_token having CHAT_BOT_USER_MESSAGE_SEND scope.This enables you to start conversation with user from ChatBot.
     * @param {String} conversationId 
     * @param {module:model/ChatAPIChatBotSendMessageBody} chatAPIChatBotSendMessageBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChatapiChatBotSendMessageResponse} and HTTP response
     */
    chatAPIChatBotSendMessageWithHttpInfo(conversationId, chatAPIChatBotSendMessageBody) {
      let postBody = chatAPIChatBotSendMessageBody;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling chatAPIChatBotSendMessage");
      }
      // verify the required parameter 'chatAPIChatBotSendMessageBody' is set
      if (chatAPIChatBotSendMessageBody === undefined || chatAPIChatBotSendMessageBody === null) {
        throw new Error("Missing the required parameter 'chatAPIChatBotSendMessageBody' when calling chatAPIChatBotSendMessage");
      }

      let pathParams = {
        'conversation_id': conversationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChatapiChatBotSendMessageResponse;
      return this.apiClient.callApi(
        '/experimental/open-platform/chatbot-conversations/{conversation_id}/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Send a message to a ChatBot conversation
     * You can call this API with either conversation_id or user_id. Calling with user_id needs a access_token having CHAT_BOT_USER_MESSAGE_SEND scope.This enables you to start conversation with user from ChatBot.
     * @param {String} conversationId 
     * @param {module:model/ChatAPIChatBotSendMessageBody} chatAPIChatBotSendMessageBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChatapiChatBotSendMessageResponse}
     */
    chatAPIChatBotSendMessage(conversationId, chatAPIChatBotSendMessageBody) {
      return this.chatAPIChatBotSendMessageWithHttpInfo(conversationId, chatAPIChatBotSendMessageBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send a message to a ChatBot conversation
     * You can call this API with either conversation_id or user_id. Calling with user_id needs a access_token having CHAT_BOT_USER_MESSAGE_SEND scope.This enables you to start conversation with user from ChatBot.
     * @param {String} userId 
     * @param {module:model/ChatAPIChatBotSendMessageBody} chatAPIChatBotSendMessageBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChatapiChatBotSendMessageResponse} and HTTP response
     */
    chatAPIChatBotSendMessage2WithHttpInfo(userId, chatAPIChatBotSendMessageBody) {
      let postBody = chatAPIChatBotSendMessageBody;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling chatAPIChatBotSendMessage2");
      }
      // verify the required parameter 'chatAPIChatBotSendMessageBody' is set
      if (chatAPIChatBotSendMessageBody === undefined || chatAPIChatBotSendMessageBody === null) {
        throw new Error("Missing the required parameter 'chatAPIChatBotSendMessageBody' when calling chatAPIChatBotSendMessage2");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChatapiChatBotSendMessageResponse;
      return this.apiClient.callApi(
        '/experimental/open-platform/chat/bot/users/{user_id}/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Send a message to a ChatBot conversation
     * You can call this API with either conversation_id or user_id. Calling with user_id needs a access_token having CHAT_BOT_USER_MESSAGE_SEND scope.This enables you to start conversation with user from ChatBot.
     * @param {String} userId 
     * @param {module:model/ChatAPIChatBotSendMessageBody} chatAPIChatBotSendMessageBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChatapiChatBotSendMessageResponse}
     */
    chatAPIChatBotSendMessage2(userId, chatAPIChatBotSendMessageBody) {
      return this.chatAPIChatBotSendMessage2WithHttpInfo(userId, chatAPIChatBotSendMessageBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send a message to a ChatBot conversation
     * You can call this API with either conversation_id or user_id. Calling with user_id needs a access_token having CHAT_BOT_USER_MESSAGE_SEND scope.This enables you to start conversation with user from ChatBot.
     * @param {String} conversationId 
     * @param {module:model/ChatAPIChatBotSendMessageBody} chatAPIChatBotSendMessageBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChatapiChatBotSendMessageResponse} and HTTP response
     */
    chatAPIChatBotSendMessage3WithHttpInfo(conversationId, chatAPIChatBotSendMessageBody) {
      let postBody = chatAPIChatBotSendMessageBody;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling chatAPIChatBotSendMessage3");
      }
      // verify the required parameter 'chatAPIChatBotSendMessageBody' is set
      if (chatAPIChatBotSendMessageBody === undefined || chatAPIChatBotSendMessageBody === null) {
        throw new Error("Missing the required parameter 'chatAPIChatBotSendMessageBody' when calling chatAPIChatBotSendMessage3");
      }

      let pathParams = {
        'conversation_id': conversationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChatapiChatBotSendMessageResponse;
      return this.apiClient.callApi(
        '/experimental/open-platform/chat/bot/conversations/{conversation_id}/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Send a message to a ChatBot conversation
     * You can call this API with either conversation_id or user_id. Calling with user_id needs a access_token having CHAT_BOT_USER_MESSAGE_SEND scope.This enables you to start conversation with user from ChatBot.
     * @param {String} conversationId 
     * @param {module:model/ChatAPIChatBotSendMessageBody} chatAPIChatBotSendMessageBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChatapiChatBotSendMessageResponse}
     */
    chatAPIChatBotSendMessage3(conversationId, chatAPIChatBotSendMessageBody) {
      return this.chatAPIChatBotSendMessage3WithHttpInfo(conversationId, chatAPIChatBotSendMessageBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send a message to a conversation
     * This API is used to send a message to a conversation. You need one of the following scopes to call this API: - CONVERSATION_SEND_MESSAGE.{conversation_id} - CHAT_SUPPLIER_ALL_CONVERSATIONS_MESSAGE_SEND - CHAT_POST_CONVERSATIONS_MESSAGE_SEND.{post_token} 
     * @param {String} conversationId 
     * @param {module:model/ChatAPIConversationSendMessageBody} chatAPIConversationSendMessageBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChatapiConversationSendMessageResponse} and HTTP response
     */
    chatAPIConversationSendMessageWithHttpInfo(conversationId, chatAPIConversationSendMessageBody) {
      let postBody = chatAPIConversationSendMessageBody;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling chatAPIConversationSendMessage");
      }
      // verify the required parameter 'chatAPIConversationSendMessageBody' is set
      if (chatAPIConversationSendMessageBody === undefined || chatAPIConversationSendMessageBody === null) {
        throw new Error("Missing the required parameter 'chatAPIConversationSendMessageBody' when calling chatAPIConversationSendMessage");
      }

      let pathParams = {
        'conversation_id': conversationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChatapiConversationSendMessageResponse;
      return this.apiClient.callApi(
        '/v2/open-platform/conversations/{conversation_id}/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Send a message to a conversation
     * This API is used to send a message to a conversation. You need one of the following scopes to call this API: - CONVERSATION_SEND_MESSAGE.{conversation_id} - CHAT_SUPPLIER_ALL_CONVERSATIONS_MESSAGE_SEND - CHAT_POST_CONVERSATIONS_MESSAGE_SEND.{post_token} 
     * @param {String} conversationId 
     * @param {module:model/ChatAPIConversationSendMessageBody} chatAPIConversationSendMessageBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChatapiConversationSendMessageResponse}
     */
    chatAPIConversationSendMessage(conversationId, chatAPIConversationSendMessageBody) {
      return this.chatAPIConversationSendMessageWithHttpInfo(conversationId, chatAPIConversationSendMessageBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Generate an upload token
     * This API is used to generate an upload token for uploading media files.
     * @param {Object.<String, Object>} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChatapiGenerateUploadTokenResponse} and HTTP response
     */
    chatAPIGenerateUploadTokenWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling chatAPIGenerateUploadToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChatapiGenerateUploadTokenResponse;
      return this.apiClient.callApi(
        '/experimental/open-platform/chat/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Generate an upload token
     * This API is used to generate an upload token for uploading media files.
     * @param {Object.<String, Object>} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChatapiGenerateUploadTokenResponse}
     */
    chatAPIGenerateUploadToken(body) {
      return this.chatAPIGenerateUploadTokenWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Conversation by it's ID
     * This API is used to get the conversation and messages of a conversation by it's ID.This API expects access token with `CHAT_CONVERSATION_READ` scope.
     * @param {String} conversationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChatapiGetConversationResponse} and HTTP response
     */
    chatAPIGetConversationWithHttpInfo(conversationId) {
      let postBody = null;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling chatAPIGetConversation");
      }

      let pathParams = {
        'conversation_id': conversationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChatapiGetConversationResponse;
      return this.apiClient.callApi(
        '/v1/open-platform/chat/conversations/{conversation_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Conversation by it's ID
     * This API is used to get the conversation and messages of a conversation by it's ID.This API expects access token with `CHAT_CONVERSATION_READ` scope.
     * @param {String} conversationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChatapiGetConversationResponse}
     */
    chatAPIGetConversation(conversationId) {
      return this.chatAPIGetConversationWithHttpInfo(conversationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
