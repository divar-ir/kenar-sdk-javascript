/**
 * Kenar API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GooglerpcStatus from '../model/GooglerpcStatus';
import SemanticCreatePostSemanticBody from '../model/SemanticCreatePostSemanticBody';
import SemanticCreateUserSemanticBody from '../model/SemanticCreateUserSemanticBody';
import SemanticCreateUserSemanticResponse from '../model/SemanticCreateUserSemanticResponse';

/**
* Semantic service.
* @module api/SemanticApi
* @version 0.1.0
*/
export default class SemanticApi {

    /**
    * Constructs a new SemanticApi. 
    * @alias module:api/SemanticApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * ایجاد اطلاعات معنایی آگهی
     * در برخی موارد، ذخیره اطلاعات مربوط به آگهی در دیوار بدون افزودن افزونه ضروری است. این API توکن دسترسی با دامنه `POST_SEMANTIC_CREATE` را انتظار دارد. 
     * @param {String} token 
     * @param {module:model/SemanticCreatePostSemanticBody} semanticCreatePostSemanticBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    semanticCreatePostSemanticWithHttpInfo(token, semanticCreatePostSemanticBody) {
      let postBody = semanticCreatePostSemanticBody;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling semanticCreatePostSemantic");
      }
      // verify the required parameter 'semanticCreatePostSemanticBody' is set
      if (semanticCreatePostSemanticBody === undefined || semanticCreatePostSemanticBody === null) {
        throw new Error("Missing the required parameter 'semanticCreatePostSemanticBody' when calling semanticCreatePostSemantic");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/experimental/open-platform/semantic/post/{token}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * ایجاد اطلاعات معنایی آگهی
     * در برخی موارد، ذخیره اطلاعات مربوط به آگهی در دیوار بدون افزودن افزونه ضروری است. این API توکن دسترسی با دامنه `POST_SEMANTIC_CREATE` را انتظار دارد. 
     * @param {String} token 
     * @param {module:model/SemanticCreatePostSemanticBody} semanticCreatePostSemanticBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    semanticCreatePostSemantic(token, semanticCreatePostSemanticBody) {
      return this.semanticCreatePostSemanticWithHttpInfo(token, semanticCreatePostSemanticBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ایجاد اطلاعات معنایی کاربر
     * در برخی موارد، ذخیره اطلاعات مربوط به کاربر در دیوار بدون افزودن افزونه ضروری است. نام کاربری در دیوار همان شماره موبایل است. این API توکن دسترسی با دامنه `USER_VERIFICATION_CREATE` را انتظار دارد. از APIهای اطلاعات معنایی کاربر برای این منظور استفاده کنید. این سرویس امکان ارسال اطلاعات معنایی و بلیط پرداخت اختیاری را فراهم می‌کند.
     * @param {String} phone 
     * @param {module:model/SemanticCreateUserSemanticBody} semanticCreateUserSemanticBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SemanticCreateUserSemanticResponse} and HTTP response
     */
    semanticCreateUserSemanticWithHttpInfo(phone, semanticCreateUserSemanticBody) {
      let postBody = semanticCreateUserSemanticBody;
      // verify the required parameter 'phone' is set
      if (phone === undefined || phone === null) {
        throw new Error("Missing the required parameter 'phone' when calling semanticCreateUserSemantic");
      }
      // verify the required parameter 'semanticCreateUserSemanticBody' is set
      if (semanticCreateUserSemanticBody === undefined || semanticCreateUserSemanticBody === null) {
        throw new Error("Missing the required parameter 'semanticCreateUserSemanticBody' when calling semanticCreateUserSemantic");
      }

      let pathParams = {
        'phone': phone
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SemanticCreateUserSemanticResponse;
      return this.apiClient.callApi(
        '/v1/open-platform/semantic/user/{phone}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * ایجاد اطلاعات معنایی کاربر
     * در برخی موارد، ذخیره اطلاعات مربوط به کاربر در دیوار بدون افزودن افزونه ضروری است. نام کاربری در دیوار همان شماره موبایل است. این API توکن دسترسی با دامنه `USER_VERIFICATION_CREATE` را انتظار دارد. از APIهای اطلاعات معنایی کاربر برای این منظور استفاده کنید. این سرویس امکان ارسال اطلاعات معنایی و بلیط پرداخت اختیاری را فراهم می‌کند.
     * @param {String} phone 
     * @param {module:model/SemanticCreateUserSemanticBody} semanticCreateUserSemanticBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SemanticCreateUserSemanticResponse}
     */
    semanticCreateUserSemantic(phone, semanticCreateUserSemanticBody) {
      return this.semanticCreateUserSemanticWithHttpInfo(phone, semanticCreateUserSemanticBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ایجاد اطلاعات معنایی کاربر
     * در برخی موارد، ذخیره اطلاعات مربوط به کاربر در دیوار بدون افزودن افزونه ضروری است. نام کاربری در دیوار همان شماره موبایل است. این API توکن دسترسی با دامنه `USER_VERIFICATION_CREATE` را انتظار دارد. از APIهای اطلاعات معنایی کاربر برای این منظور استفاده کنید. این سرویس امکان ارسال اطلاعات معنایی و بلیط پرداخت اختیاری را فراهم می‌کند.
     * @param {String} divarUserId 
     * @param {module:model/SemanticCreateUserSemanticBody} semanticCreateUserSemanticBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SemanticCreateUserSemanticResponse} and HTTP response
     */
    semanticCreateUserSemantic2WithHttpInfo(divarUserId, semanticCreateUserSemanticBody) {
      let postBody = semanticCreateUserSemanticBody;
      // verify the required parameter 'divarUserId' is set
      if (divarUserId === undefined || divarUserId === null) {
        throw new Error("Missing the required parameter 'divarUserId' when calling semanticCreateUserSemantic2");
      }
      // verify the required parameter 'semanticCreateUserSemanticBody' is set
      if (semanticCreateUserSemanticBody === undefined || semanticCreateUserSemanticBody === null) {
        throw new Error("Missing the required parameter 'semanticCreateUserSemanticBody' when calling semanticCreateUserSemantic2");
      }

      let pathParams = {
        'divar_user_id': divarUserId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SemanticCreateUserSemanticResponse;
      return this.apiClient.callApi(
        '/v1/open-platform/semantic/users/{divar_user_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * ایجاد اطلاعات معنایی کاربر
     * در برخی موارد، ذخیره اطلاعات مربوط به کاربر در دیوار بدون افزودن افزونه ضروری است. نام کاربری در دیوار همان شماره موبایل است. این API توکن دسترسی با دامنه `USER_VERIFICATION_CREATE` را انتظار دارد. از APIهای اطلاعات معنایی کاربر برای این منظور استفاده کنید. این سرویس امکان ارسال اطلاعات معنایی و بلیط پرداخت اختیاری را فراهم می‌کند.
     * @param {String} divarUserId 
     * @param {module:model/SemanticCreateUserSemanticBody} semanticCreateUserSemanticBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SemanticCreateUserSemanticResponse}
     */
    semanticCreateUserSemantic2(divarUserId, semanticCreateUserSemanticBody) {
      return this.semanticCreateUserSemantic2WithHttpInfo(divarUserId, semanticCreateUserSemanticBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * حذف اطلاعات معنایی کاربر
     * می‌توانید اطلاعات معنایی یک کاربر را با فراخوانی این API حذف کنید.
     * @param {String} phone 
     * @param {Object} opts Optional parameters
     * @param {String} [divarUserId] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    semanticDeleteUserSemanticWithHttpInfo(phone, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'phone' is set
      if (phone === undefined || phone === null) {
        throw new Error("Missing the required parameter 'phone' when calling semanticDeleteUserSemantic");
      }

      let pathParams = {
        'phone': phone
      };
      let queryParams = {
        'divar_user_id': opts['divarUserId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/open-platform/semantic/user/{phone}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * حذف اطلاعات معنایی کاربر
     * می‌توانید اطلاعات معنایی یک کاربر را با فراخوانی این API حذف کنید.
     * @param {String} phone 
     * @param {Object} opts Optional parameters
     * @param {String} opts.divarUserId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    semanticDeleteUserSemantic(phone, opts) {
      return this.semanticDeleteUserSemanticWithHttpInfo(phone, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * حذف اطلاعات معنایی کاربر
     * می‌توانید اطلاعات معنایی یک کاربر را با فراخوانی این API حذف کنید.
     * @param {String} divarUserId 
     * @param {Object} opts Optional parameters
     * @param {String} [phone] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    semanticDeleteUserSemantic2WithHttpInfo(divarUserId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'divarUserId' is set
      if (divarUserId === undefined || divarUserId === null) {
        throw new Error("Missing the required parameter 'divarUserId' when calling semanticDeleteUserSemantic2");
      }

      let pathParams = {
        'divar_user_id': divarUserId
      };
      let queryParams = {
        'phone': opts['phone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/open-platform/semantic/users/{divar_user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * حذف اطلاعات معنایی کاربر
     * می‌توانید اطلاعات معنایی یک کاربر را با فراخوانی این API حذف کنید.
     * @param {String} divarUserId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.phone 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    semanticDeleteUserSemantic2(divarUserId, opts) {
      return this.semanticDeleteUserSemantic2WithHttpInfo(divarUserId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
