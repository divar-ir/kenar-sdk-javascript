/**
 * Kenar API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GooglerpcStatus from '../model/GooglerpcStatus';
import PaymentCommitWalletTransactionRequest from '../model/PaymentCommitWalletTransactionRequest';
import PaymentCommitWalletTransactionResponse from '../model/PaymentCommitWalletTransactionResponse';
import PaymentCreateWalletPaymentRequest from '../model/PaymentCreateWalletPaymentRequest';
import PaymentCreateWalletPaymentResponse from '../model/PaymentCreateWalletPaymentResponse';
import PaymentGetBalanceResponse from '../model/PaymentGetBalanceResponse';
import PaymentGetPostPricingResponse from '../model/PaymentGetPostPricingResponse';
import PaymentGetTransactionResponse from '../model/PaymentGetTransactionResponse';
import PaymentListTransactionsResponse from '../model/PaymentListTransactionsResponse';
import PaymentReorderPostBody from '../model/PaymentReorderPostBody';
import PaymentReorderPostResponse from '../model/PaymentReorderPostResponse';
import PaymentRetrieveWalletTransactionResponse from '../model/PaymentRetrieveWalletTransactionResponse';

/**
* Limited service.
* @module api/LimitedApi
* @version 0.1.0
*/
export default class LimitedApi {

    /**
    * Constructs a new LimitedApi. 
    * @alias module:api/LimitedApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * با استفاده از این API می‌توانید یک پرداخت موفق را commit کنید. این API idempotent است و می‌توانید چندین بار آن را فراخوانی کنید.
     * @param {module:model/PaymentCommitWalletTransactionRequest} paymentCommitWalletTransactionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentCommitWalletTransactionResponse} and HTTP response
     */
    paymentCommitWalletTransactionWithHttpInfo(paymentCommitWalletTransactionRequest) {
      let postBody = paymentCommitWalletTransactionRequest;
      // verify the required parameter 'paymentCommitWalletTransactionRequest' is set
      if (paymentCommitWalletTransactionRequest === undefined || paymentCommitWalletTransactionRequest === null) {
        throw new Error("Missing the required parameter 'paymentCommitWalletTransactionRequest' when calling paymentCommitWalletTransaction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentCommitWalletTransactionResponse;
      return this.apiClient.callApi(
        '/experimental/open-platform/wallet/payments/commit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * با استفاده از این API می‌توانید یک پرداخت موفق را commit کنید. این API idempotent است و می‌توانید چندین بار آن را فراخوانی کنید.
     * @param {module:model/PaymentCommitWalletTransactionRequest} paymentCommitWalletTransactionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentCommitWalletTransactionResponse}
     */
    paymentCommitWalletTransaction(paymentCommitWalletTransactionRequest) {
      return this.paymentCommitWalletTransactionWithHttpInfo(paymentCommitWalletTransactionRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * با استفاده از این API می‌توانید یک تراکنش پرداخت از کیف پول کاربران شروع کنید.
     * @param {module:model/PaymentCreateWalletPaymentRequest} paymentCreateWalletPaymentRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentCreateWalletPaymentResponse} and HTTP response
     */
    paymentCreateWalletPaymentWithHttpInfo(paymentCreateWalletPaymentRequest) {
      let postBody = paymentCreateWalletPaymentRequest;
      // verify the required parameter 'paymentCreateWalletPaymentRequest' is set
      if (paymentCreateWalletPaymentRequest === undefined || paymentCreateWalletPaymentRequest === null) {
        throw new Error("Missing the required parameter 'paymentCreateWalletPaymentRequest' when calling paymentCreateWalletPayment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentCreateWalletPaymentResponse;
      return this.apiClient.callApi(
        '/experimental/open-platform/wallet/payments/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * با استفاده از این API می‌توانید یک تراکنش پرداخت از کیف پول کاربران شروع کنید.
     * @param {module:model/PaymentCreateWalletPaymentRequest} paymentCreateWalletPaymentRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentCreateWalletPaymentResponse}
     */
    paymentCreateWalletPayment(paymentCreateWalletPaymentRequest) {
      return this.paymentCreateWalletPaymentWithHttpInfo(paymentCreateWalletPaymentRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * با استفاده از این API می‌توانید موجودی فعلی اپلیکیشن خود را دریافت کنید.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentGetBalanceResponse} and HTTP response
     */
    paymentGetBalanceWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentGetBalanceResponse;
      return this.apiClient.callApi(
        '/experimental/open-platform/balance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * با استفاده از این API می‌توانید موجودی فعلی اپلیکیشن خود را دریافت کنید.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentGetBalanceResponse}
     */
    paymentGetBalance() {
      return this.paymentGetBalanceWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * دریافت هزینه سرویس
     * با استفاده از این API و با مجوز کاربر، می‌توانید قیمت سرویس‌های مختلف مانند نردبان را دریافت کنید. قیمت این API لزوماً با قیمت روی دیوار یکسان نیست و قیمت‌گذاری ممکن است متفاوت باشد. از این API برای دریافت قیمت قبل از اعمال سرویس‌ها (مانند نردبان آگهی) استفاده کنید.
     * @param {String} postToken شناسه منحصر به فرد 8-9 کاراکتری برای آگهی
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentGetPostPricingResponse} and HTTP response
     */
    paymentGetPostPricingWithHttpInfo(postToken) {
      let postBody = null;
      // verify the required parameter 'postToken' is set
      if (postToken === undefined || postToken === null) {
        throw new Error("Missing the required parameter 'postToken' when calling paymentGetPostPricing");
      }

      let pathParams = {
        'post_token': postToken
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentGetPostPricingResponse;
      return this.apiClient.callApi(
        '/v1/open-platform/post/{post_token}/pricing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * دریافت هزینه سرویس
     * با استفاده از این API و با مجوز کاربر، می‌توانید قیمت سرویس‌های مختلف مانند نردبان را دریافت کنید. قیمت این API لزوماً با قیمت روی دیوار یکسان نیست و قیمت‌گذاری ممکن است متفاوت باشد. از این API برای دریافت قیمت قبل از اعمال سرویس‌ها (مانند نردبان آگهی) استفاده کنید.
     * @param {String} postToken شناسه منحصر به فرد 8-9 کاراکتری برای آگهی
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentGetPostPricingResponse}
     */
    paymentGetPostPricing(postToken) {
      return this.paymentGetPostPricingWithHttpInfo(postToken)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * با استفاده از این API می‌توانید جزئیات تراکنش را دریافت کنید.
     * @param {String} id شناسه منحصر به فرد برای تراکنش، همان id در درخواست
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentGetTransactionResponse} and HTTP response
     */
    paymentGetTransactionWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentGetTransaction");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentGetTransactionResponse;
      return this.apiClient.callApi(
        '/experimental/open-platform/transactions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * با استفاده از این API می‌توانید جزئیات تراکنش را دریافت کنید.
     * @param {String} id شناسه منحصر به فرد برای تراکنش، همان id در درخواست
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentGetTransactionResponse}
     */
    paymentGetTransaction(id) {
      return this.paymentGetTransactionWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * با استفاده از این api میتوانید لیست تراکنش‌های اپ را مشاهده کنید. برای مشاهده‌ی تمام تراکنش‌ها، صفحات را دنبال کنید.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] Number of transactions to return per page
     * @param {String} [pageToken] Token for the next page of results
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentListTransactionsResponse} and HTTP response
     */
    paymentListTransactionsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentListTransactionsResponse;
      return this.apiClient.callApi(
        '/experimental/open-platform/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * با استفاده از این api میتوانید لیست تراکنش‌های اپ را مشاهده کنید. برای مشاهده‌ی تمام تراکنش‌ها، صفحات را دنبال کنید.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize Number of transactions to return per page
     * @param {String} opts.pageToken Token for the next page of results
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentListTransactionsResponse}
     */
    paymentListTransactions(opts) {
      return this.paymentListTransactionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * قبل از فراخوانی این API، از API GetPostPricing برای دریافت هزینه سرویس استفاده کنید.
     * @param {String} postToken 
     * @param {module:model/PaymentReorderPostBody} paymentReorderPostBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentReorderPostResponse} and HTTP response
     */
    paymentReorderPostWithHttpInfo(postToken, paymentReorderPostBody) {
      let postBody = paymentReorderPostBody;
      // verify the required parameter 'postToken' is set
      if (postToken === undefined || postToken === null) {
        throw new Error("Missing the required parameter 'postToken' when calling paymentReorderPost");
      }
      // verify the required parameter 'paymentReorderPostBody' is set
      if (paymentReorderPostBody === undefined || paymentReorderPostBody === null) {
        throw new Error("Missing the required parameter 'paymentReorderPostBody' when calling paymentReorderPost");
      }

      let pathParams = {
        'post_token': postToken
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentReorderPostResponse;
      return this.apiClient.callApi(
        '/experimental/open-platform/post/{post_token}/reorder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * قبل از فراخوانی این API، از API GetPostPricing برای دریافت هزینه سرویس استفاده کنید.
     * @param {String} postToken 
     * @param {module:model/PaymentReorderPostBody} paymentReorderPostBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentReorderPostResponse}
     */
    paymentReorderPost(postToken, paymentReorderPostBody) {
      return this.paymentReorderPostWithHttpInfo(postToken, paymentReorderPostBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * با استفاده از این API می‌توانید یک تراکنش و وضعیت آن را بازیابی کنید. از این API برای اعتبارسنجی پرداخت قبل از commit استفاده کنید.
     * @param {String} token توکن تراکنشی که می‌خواهید بازیابی کنید
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentRetrieveWalletTransactionResponse} and HTTP response
     */
    paymentRetrieveWalletTransactionWithHttpInfo(token) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling paymentRetrieveWalletTransaction");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentRetrieveWalletTransactionResponse;
      return this.apiClient.callApi(
        '/experimental/open-platform/wallet/payments/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * با استفاده از این API می‌توانید یک تراکنش و وضعیت آن را بازیابی کنید. از این API برای اعتبارسنجی پرداخت قبل از commit استفاده کنید.
     * @param {String} token توکن تراکنشی که می‌خواهید بازیابی کنید
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentRetrieveWalletTransactionResponse}
     */
    paymentRetrieveWalletTransaction(token) {
      return this.paymentRetrieveWalletTransactionWithHttpInfo(token)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ثبت پرداخت کاربر
     * باید با استفاده از این API پرداخت کاربران را ثبت کنید. ضروری است که از این API برای ثبت هر پرداخت کاربر به همراه مبلغ دریافتی استفاده کنید. انتظار می‌رود این API با توکن دسترسی دارای دامنه SUBMIT_USER_PAYMENT فراخوانی شود.
     * @param {Object} opts Optional parameters
     * @param {String} [amountRials] کل مبلغ پرداختی توسط کاربر، به ریال
     * @param {String} [profitRials] بخشی از مبلغ پرداختی که به شما تعلق می‌گیرد (سود یا کمیسیون)، به ریال
     * @param {Array.<String>} [services] لیست شناسه سرویس‌هایی که کاربر برای آنها پرداخت انجام داده است (مثلاً «بنر»، «بهبود عنوان» و ...)
     * @param {String} [referenceId] Reference ID of the invoice or transaction.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    paymentSubmitUserPaymentWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'amount_rials': opts['amountRials'],
        'profit_rials': opts['profitRials'],
        'services': this.apiClient.buildCollectionParam(opts['services'], 'multi'),
        'reference_id': opts['referenceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/open-platform/user-payments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * ثبت پرداخت کاربر
     * باید با استفاده از این API پرداخت کاربران را ثبت کنید. ضروری است که از این API برای ثبت هر پرداخت کاربر به همراه مبلغ دریافتی استفاده کنید. انتظار می‌رود این API با توکن دسترسی دارای دامنه SUBMIT_USER_PAYMENT فراخوانی شود.
     * @param {Object} opts Optional parameters
     * @param {String} opts.amountRials کل مبلغ پرداختی توسط کاربر، به ریال
     * @param {String} opts.profitRials بخشی از مبلغ پرداختی که به شما تعلق می‌گیرد (سود یا کمیسیون)، به ریال
     * @param {Array.<String>} opts.services لیست شناسه سرویس‌هایی که کاربر برای آنها پرداخت انجام داده است (مثلاً «بنر»، «بهبود عنوان» و ...)
     * @param {String} opts.referenceId Reference ID of the invoice or transaction.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    paymentSubmitUserPayment(opts) {
      return this.paymentSubmitUserPaymentWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
