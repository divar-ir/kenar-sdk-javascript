/**
 * Kenar API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GooglerpcStatus from '../model/GooglerpcStatus';
import PaymentGetBalanceResponse from '../model/PaymentGetBalanceResponse';
import PaymentGetPostPricingResponse from '../model/PaymentGetPostPricingResponse';
import PaymentGetTransactionResponse from '../model/PaymentGetTransactionResponse';
import PaymentListTransactionsResponse from '../model/PaymentListTransactionsResponse';
import PaymentReorderPostBody from '../model/PaymentReorderPostBody';
import PaymentReorderPostResponse from '../model/PaymentReorderPostResponse';

/**
* Limited service.
* @module api/LimitedApi
* @version 0.1.0
*/
export default class LimitedApi {

    /**
    * Constructs a new LimitedApi. 
    * @alias module:api/LimitedApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * با استفاده از این API می‌توانید موجودی فعلی اپلیکیشن خود را دریافت کنید.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentGetBalanceResponse} and HTTP response
     */
    paymentGetBalanceWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentGetBalanceResponse;
      return this.apiClient.callApi(
        '/experimental/open-platform/balance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * با استفاده از این API می‌توانید موجودی فعلی اپلیکیشن خود را دریافت کنید.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentGetBalanceResponse}
     */
    paymentGetBalance() {
      return this.paymentGetBalanceWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * دریافت هزینه سرویس
     * با استفاده از این API و با مجوز کاربر، می‌توانید قیمت سرویس‌های مختلف مانند نردبان را دریافت کنید. قیمت این API لزوماً با قیمت روی دیوار یکسان نیست و قیمت‌گذاری ممکن است متفاوت باشد. از این API برای دریافت قیمت قبل از اعمال سرویس‌ها (مانند نردبان آگهی) استفاده کنید.
     * @param {String} postToken شناسه منحصر به فرد 8-9 کاراکتری برای آگهی
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentGetPostPricingResponse} and HTTP response
     */
    paymentGetPostPricingWithHttpInfo(postToken) {
      let postBody = null;
      // verify the required parameter 'postToken' is set
      if (postToken === undefined || postToken === null) {
        throw new Error("Missing the required parameter 'postToken' when calling paymentGetPostPricing");
      }

      let pathParams = {
        'post_token': postToken
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentGetPostPricingResponse;
      return this.apiClient.callApi(
        '/v1/open-platform/post/{post_token}/pricing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * دریافت هزینه سرویس
     * با استفاده از این API و با مجوز کاربر، می‌توانید قیمت سرویس‌های مختلف مانند نردبان را دریافت کنید. قیمت این API لزوماً با قیمت روی دیوار یکسان نیست و قیمت‌گذاری ممکن است متفاوت باشد. از این API برای دریافت قیمت قبل از اعمال سرویس‌ها (مانند نردبان آگهی) استفاده کنید.
     * @param {String} postToken شناسه منحصر به فرد 8-9 کاراکتری برای آگهی
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentGetPostPricingResponse}
     */
    paymentGetPostPricing(postToken) {
      return this.paymentGetPostPricingWithHttpInfo(postToken)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * با استفاده از این API می‌توانید جزئیات تراکنش را دریافت کنید.
     * @param {String} id شناسه منحصر به فرد برای تراکنش، همان id در درخواست
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentGetTransactionResponse} and HTTP response
     */
    paymentGetTransactionWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentGetTransaction");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentGetTransactionResponse;
      return this.apiClient.callApi(
        '/experimental/open-platform/transactions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * با استفاده از این API می‌توانید جزئیات تراکنش را دریافت کنید.
     * @param {String} id شناسه منحصر به فرد برای تراکنش، همان id در درخواست
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentGetTransactionResponse}
     */
    paymentGetTransaction(id) {
      return this.paymentGetTransactionWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * با استفاده از این api میتوانید لیست تراکنش‌های اپ را مشاهده کنید. برای مشاهده‌ی تمام تراکنش‌ها، صفحات را دنبال کنید.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] Number of transactions to return per page
     * @param {String} [pageToken] Token for the next page of results
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentListTransactionsResponse} and HTTP response
     */
    paymentListTransactionsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentListTransactionsResponse;
      return this.apiClient.callApi(
        '/experimental/open-platform/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * با استفاده از این api میتوانید لیست تراکنش‌های اپ را مشاهده کنید. برای مشاهده‌ی تمام تراکنش‌ها، صفحات را دنبال کنید.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize Number of transactions to return per page
     * @param {String} opts.pageToken Token for the next page of results
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentListTransactionsResponse}
     */
    paymentListTransactions(opts) {
      return this.paymentListTransactionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * قبل از فراخوانی این API، از API GetPostPricing برای دریافت هزینه سرویس استفاده کنید.
     * @param {String} postToken 
     * @param {module:model/PaymentReorderPostBody} paymentReorderPostBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentReorderPostResponse} and HTTP response
     */
    paymentReorderPostWithHttpInfo(postToken, paymentReorderPostBody) {
      let postBody = paymentReorderPostBody;
      // verify the required parameter 'postToken' is set
      if (postToken === undefined || postToken === null) {
        throw new Error("Missing the required parameter 'postToken' when calling paymentReorderPost");
      }
      // verify the required parameter 'paymentReorderPostBody' is set
      if (paymentReorderPostBody === undefined || paymentReorderPostBody === null) {
        throw new Error("Missing the required parameter 'paymentReorderPostBody' when calling paymentReorderPost");
      }

      let pathParams = {
        'post_token': postToken
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentReorderPostResponse;
      return this.apiClient.callApi(
        '/experimental/open-platform/post/{post_token}/reorder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * قبل از فراخوانی این API، از API GetPostPricing برای دریافت هزینه سرویس استفاده کنید.
     * @param {String} postToken 
     * @param {module:model/PaymentReorderPostBody} paymentReorderPostBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentReorderPostResponse}
     */
    paymentReorderPost(postToken, paymentReorderPostBody) {
      return this.paymentReorderPostWithHttpInfo(postToken, paymentReorderPostBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
