/**
 * Kenar API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FinderGetPostResponse from '../model/FinderGetPostResponse';
import FinderGetUserPostsResponse from '../model/FinderGetUserPostsResponse';
import FinderSearchPostV2Response from '../model/FinderSearchPostV2Response';
import FinderSearchPostsV2Request from '../model/FinderSearchPostsV2Request';
import FinderUser from '../model/FinderUser';
import GooglerpcStatus from '../model/GooglerpcStatus';

/**
* Finder service.
* @module api/FinderApi
* @version 0.1.0
*/
export default class FinderApi {

    /**
    * Constructs a new FinderApi. 
    * @alias module:api/FinderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get a Divar post
     * This API allows you to get details about Divar post by its token. You can use the token to get the post data and its state 
     * @param {String} token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FinderGetPostResponse} and HTTP response
     */
    finderGetPostWithHttpInfo(token) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling finderGetPost");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FinderGetPostResponse;
      return this.apiClient.callApi(
        '/v1/open-platform/finder/post/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a Divar post
     * This API allows you to get details about Divar post by its token. You can use the token to get the post data and its state 
     * @param {String} token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FinderGetPostResponse}
     */
    finderGetPost(token) {
      return this.finderGetPostWithHttpInfo(token)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get user information
     * After gaining an access token, you can use this API to get user information. With scope `USER_PHONE` you can get user phone number. With scope `USER_ID` you can get user id and you can rely on uniqueness of this id. 
     * @param {Object.<String, Object>} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FinderUser} and HTTP response
     */
    finderGetUserWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling finderGetUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FinderUser;
      return this.apiClient.callApi(
        '/v1/open-platform/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get user information
     * After gaining an access token, you can use this API to get user information. With scope `USER_PHONE` you can get user phone number. With scope `USER_ID` you can get user id and you can rely on uniqueness of this id. 
     * @param {Object.<String, Object>} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FinderUser}
     */
    finderGetUser(body) {
      return this.finderGetUserWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get user information
     * After gaining an access token, you can use this API to get user information. With scope `USER_PHONE` you can get user phone number. With scope `USER_ID` you can get user id and you can rely on uniqueness of this id. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FinderUser} and HTTP response
     */
    finderGetUser2WithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FinderUser;
      return this.apiClient.callApi(
        '/v1/open-platform/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get user information
     * After gaining an access token, you can use this API to get user information. With scope `USER_PHONE` you can get user phone number. With scope `USER_ID` you can get user id and you can rely on uniqueness of this id. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FinderUser}
     */
    finderGetUser2() {
      return this.finderGetUser2WithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get user posts
     * This API allows you to get all posts of a user. You can use this API to show user posts in your service.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FinderGetUserPostsResponse} and HTTP response
     */
    finderGetUserPostsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FinderGetUserPostsResponse;
      return this.apiClient.callApi(
        '/v1/open-platform/finder/user-posts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get user posts
     * This API allows you to get all posts of a user. You can use this API to show user posts in your service.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FinderGetUserPostsResponse}
     */
    finderGetUserPosts() {
      return this.finderGetUserPostsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Divar posts with some filters
     * This API allows you to search Divar posts with some filters. You can search posts by category, city, district, and some other filters. Posts will be sorted by their timestamp. 
     * @param {module:model/FinderSearchPostsV2Request} finderSearchPostsV2Request 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FinderSearchPostV2Response} and HTTP response
     */
    finderSearchPostV2WithHttpInfo(finderSearchPostsV2Request) {
      let postBody = finderSearchPostsV2Request;
      // verify the required parameter 'finderSearchPostsV2Request' is set
      if (finderSearchPostsV2Request === undefined || finderSearchPostsV2Request === null) {
        throw new Error("Missing the required parameter 'finderSearchPostsV2Request' when calling finderSearchPostV2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FinderSearchPostV2Response;
      return this.apiClient.callApi(
        '/v2/open-platform/finder/post', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search Divar posts with some filters
     * This API allows you to search Divar posts with some filters. You can search posts by category, city, district, and some other filters. Posts will be sorted by their timestamp. 
     * @param {module:model/FinderSearchPostsV2Request} finderSearchPostsV2Request 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FinderSearchPostV2Response}
     */
    finderSearchPostV2(finderSearchPostsV2Request) {
      return this.finderSearchPostV2WithHttpInfo(finderSearchPostsV2Request)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
