/**
 * Kenar API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EventsRegisterEventSubscriptionRequest from '../model/EventsRegisterEventSubscriptionRequest';
import GooglerpcStatus from '../model/GooglerpcStatus';

/**
* Events service.
* @module api/EventsApi
* @version 0.1.0
*/
export default class EventsApi {

    /**
    * Constructs a new EventsApi. 
    * @alias module:api/EventsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Subscribe to an event
     * This requests allows you to subscribe to an event. You need to send access-token in this API to check your access. For subscribing on `NEW_MESSAGE_ON_POST` you need one of these scopes: - CHAT_POST_CONVERSATIONS_READ.{post_token} - CHAT_SUPPLIER_ALL_CONVERSATIONS_READ For subscribing on `POST_UPDATE` you need `USER_POSTS_GET` scope. After calling this API, You'll be notified in your webhook when corresponding event occurs. Make sure webhook URL is set on providers panel for your app. Some events are enabled by default and no subscription is needed for them(e.g chatbot messages).
     * @param {module:model/EventsRegisterEventSubscriptionRequest} eventsRegisterEventSubscriptionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    eventsRegisterEventSubscriptionWithHttpInfo(eventsRegisterEventSubscriptionRequest) {
      let postBody = eventsRegisterEventSubscriptionRequest;
      // verify the required parameter 'eventsRegisterEventSubscriptionRequest' is set
      if (eventsRegisterEventSubscriptionRequest === undefined || eventsRegisterEventSubscriptionRequest === null) {
        throw new Error("Missing the required parameter 'eventsRegisterEventSubscriptionRequest' when calling eventsRegisterEventSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/open-platform/events/subscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Subscribe to an event
     * This requests allows you to subscribe to an event. You need to send access-token in this API to check your access. For subscribing on `NEW_MESSAGE_ON_POST` you need one of these scopes: - CHAT_POST_CONVERSATIONS_READ.{post_token} - CHAT_SUPPLIER_ALL_CONVERSATIONS_READ For subscribing on `POST_UPDATE` you need `USER_POSTS_GET` scope. After calling this API, You'll be notified in your webhook when corresponding event occurs. Make sure webhook URL is set on providers panel for your app. Some events are enabled by default and no subscription is needed for them(e.g chatbot messages).
     * @param {module:model/EventsRegisterEventSubscriptionRequest} eventsRegisterEventSubscriptionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    eventsRegisterEventSubscription(eventsRegisterEventSubscriptionRequest) {
      return this.eventsRegisterEventSubscriptionWithHttpInfo(eventsRegisterEventSubscriptionRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
